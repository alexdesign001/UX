<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:system="clr-namespace:System;assembly=mscorlib"
  xmlns:po="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
  xmlns:aero="clr-namespace:PresentationTheme.Aero;assembly=PresentationTheme.Aero"
  xmlns:aero10="clr-namespace:PresentationTheme.Aero.Win10">

  <aero:TreeViewItemLevelConverter x:Key="TreeViewItemLevelConverter"/>
  <aero10:TypeOfConverter x:Key="TypeOfConverter"/>
  <aero10:EqualsConverter x:Key="EqualsConverter"/>
  <aero10:ThicknessMaskConverter x:Key="ThicknessMaskConverter"/>
  <BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter"/>

  <Style x:Key="{x:Static SystemParameters.FocusVisualStyleKey}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle SnapsToDevicePixels="True"
                     Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                     StrokeThickness="1"
                     StrokeDashArray="1 1"
                     StrokeDashOffset="1.5"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="FocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="2"
                     SnapsToDevicePixels="True"
                     Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                     StrokeThickness="1"
                     StrokeDashArray="1 1"
                     StrokeDashOffset="1.5"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <!-- TextBox ============================================================= -->

  <SolidColorBrush x:Key="TextBox.Background.Normal" Color="#FFFFFFFF" po:Freeze="True"/>
  <Color x:Key="TextBox.Background.Hot.Color">#FFFFFFFF</Color>
  <Color x:Key="TextBox.Background.Focused.Color">#FFFFFFFF</Color>
  <Color x:Key="TextBox.Background.ReadOnly.Color">#FFF0F0F0</Color>
  <Color x:Key="TextBox.Background.Disabled.Color">#FFF0F0F0</Color>

  <SolidColorBrush x:Key="TextBox.Border.Normal" Color="#FF7A7A7A" po:Freeze="True"/>
  <Color x:Key="TextBox.Border.Hot.Color">#FF171717</Color>
  <Color x:Key="TextBox.Border.Focused.Color">#FF0078D7</Color>
  <Color x:Key="TextBox.Border.ReadOnly.Color">#FF7A7A7A</Color>
  <Color x:Key="TextBox.Border.Disabled.Color">#FFCCCCCC</Color>

  <Style TargetType="{x:Type aero10:TextBoxChrome}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type aero10:TextBoxChrome}">
          <Border x:Name="Border"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  SnapsToDevicePixels="True"
                  VisualStateManager.CustomVisualStateManager="{x:Static aero:SystemVisualStateManager.Instance}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="BackgroundStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="BackgroundNormal" To="BackgroundNormal" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundNormal" To="BackgroundHot" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="BackgroundNormal" To="BackgroundDisabled" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="BackgroundNormal" To="BackgroundFocused" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="BackgroundNormal" To="BackgroundReadOnly" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundHot" To="BackgroundNormal" GeneratedDuration="0:00:00.635"/>
                  <VisualTransition From="BackgroundHot" To="BackgroundHot" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundHot" To="BackgroundDisabled" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="BackgroundHot" To="BackgroundFocused" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="BackgroundHot" To="BackgroundReadOnly" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundDisabled" To="BackgroundNormal" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="BackgroundDisabled" To="BackgroundHot" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="BackgroundDisabled" To="BackgroundDisabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundDisabled" To="BackgroundFocused" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundDisabled" To="BackgroundReadOnly" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundFocused" To="BackgroundNormal" GeneratedDuration="0:00:00.375"/>
                  <VisualTransition From="BackgroundFocused" To="BackgroundHot" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundFocused" To="BackgroundDisabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundFocused" To="BackgroundFocused" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundFocused" To="BackgroundReadOnly" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundReadOnly" To="BackgroundNormal" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundReadOnly" To="BackgroundHot" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundReadOnly" To="BackgroundDisabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundReadOnly" To="BackgroundFocused" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundReadOnly" To="BackgroundReadOnly" GeneratedDuration="0:00:00"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="BackgroundNormal"/>
                <VisualState x:Name="BackgroundHot"/>
                <VisualState x:Name="BackgroundFocused"/>
                <VisualState x:Name="BackgroundDisabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="InnerBorder"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource TextBox.Background.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="BackgroundReadOnly">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="InnerBorder"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource TextBox.Background.ReadOnly.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="BorderStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="BorderNormal" To="BorderNormal" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BorderNormal" To="BorderHot" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="BorderNormal" To="BorderFocused" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="BorderNormal" To="BorderDisabled" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="BorderHot" To="BorderNormal" GeneratedDuration="0:00:00.635"/>
                  <VisualTransition From="BorderHot" To="BorderHot" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BorderHot" To="BorderFocused" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="BorderHot" To="BorderDisabled" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="BorderFocused" To="BorderNormal" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="BorderFocused" To="BorderHot" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="BorderFocused" To="BorderFocused" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BorderFocused" To="BorderDisabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BorderDisabled" To="BorderNormal" GeneratedDuration="0:00:00.375"/>
                  <VisualTransition From="BorderDisabled" To="BorderHot" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BorderDisabled" To="BorderFocused" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BorderDisabled" To="BorderDisabled" GeneratedDuration="0:00:00"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="BorderNormal"/>
                <VisualState x:Name="BorderHot">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource TextBox.Border.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="BorderFocused">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource TextBox.Border.Focused.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="BorderDisabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource TextBox.Border.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="InnerBorder" Margin="1" Background="{TemplateBinding Background}">
              <ContentPresenter/>
            </Border>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="BorderThickness" Value="0">
              <Setter TargetName="InnerBorder" Property="Margin" Value="0"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type TextBoxBase}">
    <Setter Property="Background" Value="{StaticResource TextBox.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource TextBox.Border.Normal}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Padding" Value="1,2"/>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="AllowDrop" Value="True"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="IsReadOnlyCaretVisible" Value="True"/>
    <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
    <Setter Property="SelectionOpacity" Value="0.5"/>
    <Setter Property="aero:TextBoxService.ViewMargin" Value="0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBoxBase}">
          <aero10:TextBoxChrome Style="{StaticResource {x:Type aero10:TextBoxChrome}}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Foreground="{TemplateBinding Foreground}"
                                RenderEnabled="{TemplateBinding IsEnabled}"
                                RenderReadOnly="{TemplateBinding IsReadOnly}"
                                RenderFocused="{TemplateBinding IsKeyboardFocused}"
                                RenderHot="{TemplateBinding IsMouseOver}">
            <ScrollViewer x:Name="PART_ContentHost"
                          Focusable="False"
                          HorizontalScrollBarVisibility="Hidden"
                          VerticalScrollBarVisibility="Hidden"/>
          </aero10:TextBoxChrome>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True"/>
          <Condition Property="IsSelectionActive" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="{x:Type PasswordBox}">
    <Setter Property="PasswordChar" Value="●"/>
    <Setter Property="Background" Value="{StaticResource TextBox.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource TextBox.Border.Normal}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Padding" Value="-1,2"/>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="AllowDrop" Value="True"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type PasswordBox}">
          <aero10:TextBoxChrome Style="{StaticResource {x:Type aero10:TextBoxChrome}}"
                                Focusable="False"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Foreground="{TemplateBinding Foreground}"
                                RenderEnabled="{TemplateBinding IsEnabled}"
                                RenderFocused="{TemplateBinding IsKeyboardFocused}"
                                RenderHot="{TemplateBinding IsMouseOver}">
            <ScrollViewer x:Name="PART_ContentHost"
                          Focusable="False"
                          HorizontalScrollBarVisibility="Hidden"
                          VerticalScrollBarVisibility="Hidden"/>
          </aero10:TextBoxChrome>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True"/>
          <Condition Property="IsSelectionActive" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="{x:Type TextBox}"
         BasedOn="{StaticResource {x:Type TextBoxBase}}"/>

  <Style TargetType="{x:Type Hyperlink}">
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HotTrackBrushKey}}"/>
    <Setter Property="TextDecorations" Value="Underline"/>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Foreground" Value="Red"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="True">
        <Setter Property="Cursor" Value="Hand"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="{x:Type RichTextBox}"
           BasedOn="{StaticResource {x:Type TextBoxBase}}">
    <Style.Resources>
      <Style TargetType="{x:Type FlowDocument}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
      </Style>
      <Style TargetType="{x:Type Hyperlink}"
             BasedOn="{StaticResource {x:Type Hyperlink}}">
        <Style.Triggers>
          <Trigger Property="IsMouseOver" Value="True">
            <Setter Property="Foreground" Value="Blue"/>
          </Trigger>
          <Trigger Property="IsEnabled" Value="False">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
          </Trigger>
        </Style.Triggers>
      </Style>
    </Style.Resources>
    <Setter Property="MinWidth" Value="10"/>
  </Style>


  <!-- Button ============================================================== -->

  <Style x:Key="Button.FocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border Margin="{Binding AdornedElement.BorderThickness, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Adorner}}}">
            <Rectangle Margin="2"
                       SnapsToDevicePixels="True"
                       Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                       StrokeThickness="1"
                       StrokeDashArray="1 1"
                       StrokeDashOffset="1.5"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <SolidColorBrush x:Key="Button.Background.Normal" Color="#FFE1E1E1" po:Freeze="True"/>
  <Color x:Key="Button.Background.Hot.Color">#FFE5F1FB</Color>
  <Color x:Key="Button.Background.Pressed.Color">#FFCCE4F7</Color>
  <Color x:Key="Button.Background.Disabled.Color">#FFCCCCCC</Color>

  <SolidColorBrush x:Key="Button.Border.Normal" Color="#FFADADAD" po:Freeze="True"/>
  <Color x:Key="Button.Border.Hot.Color">#FF0078D7</Color>
  <Color x:Key="Button.Border.Pressed.Color">#FF005499</Color>
  <Color x:Key="Button.Border.Disabled.Color">#FFBFBFBF</Color>
  <SolidColorBrush x:Key="Button.Foreground.Disabled" Color="#FF838383" po:Freeze="True"/>

  <Style TargetType="{x:Type aero10:ButtonChrome}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Margin" Value="1"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type aero10:ButtonChrome}">
          <Border x:Name="Border"
                  Background="{TemplateBinding Background}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  SnapsToDevicePixels="True"
                  VisualStateManager.CustomVisualStateManager="{x:Static aero:SystemVisualStateManager.Instance}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="Hot" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Normal" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Normal" To="Disabled" GeneratedDuration="0:00:00.15"/>
                  <!-- aero.msstyles defines durations for transitions between
                       normal and defaulted but buttons in standard system
                       dialogs do not use it -->
                  <!--<VisualTransition From="Normal" To="Defaulted" GeneratedDuration="0:00:00.225"/>-->
                  <VisualTransition From="Hot" To="Normal" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Hot" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Hot" To="Disabled" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Hot" To="Defaulted" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Pressed" To="Normal" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Pressed" To="Hot" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Pressed" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Pressed" To="Defaulted" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Disabled" To="Normal" GeneratedDuration="0:00:00.375"/>
                  <VisualTransition From="Disabled" To="Hot" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Pressed" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Defaulted" GeneratedDuration="0:00:00.375"/>
                  <!--<VisualTransition From="Defaulted" To="Normal" GeneratedDuration="0:00:00.225"/>-->
                  <VisualTransition From="Defaulted" To="Hot" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Defaulted" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Defaulted" To="Disabled" GeneratedDuration="0:00:00.15"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="Hot">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource Button.Border.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource Button.Background.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource Button.Border.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource Button.Background.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Defaulted">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource Button.Border.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="DefaultedBorder"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource Button.Border.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource Button.Border.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource Button.Background.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="DefaultedBorder"
                    BorderThickness="1"
                    BorderBrush="Transparent"
                    SnapsToDevicePixels="True">
              <ContentPresenter x:Name="Content"
                                RecognizesAccessKey="True"
                                Margin="{TemplateBinding Padding}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"/>
            </Border>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="BaseButtonStyle" TargetType="{x:Type ButtonBase}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource Button.FocusVisual}"/>
    <Setter Property="Foreground" Value="Black"/>
    <Setter Property="Background" Value="{StaticResource Button.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource Button.Border.Normal}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Padding" Value="1"/>
    <Setter Property="MinWidth" Value="10"/>
    <Setter Property="MinHeight" Value="5"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <aero10:ButtonChrome Style="{StaticResource {x:Type aero10:ButtonChrome}}"
                               Focusable="False"
                               Background="{TemplateBinding Background}"
                               BorderBrush="{TemplateBinding BorderBrush}"
                               BorderThickness="{TemplateBinding BorderThickness}"
                               Foreground="{TemplateBinding Foreground}"
                               Padding="{TemplateBinding Padding}"
                               RenderEnabled="{TemplateBinding IsEnabled}"
                               RenderPressed="{TemplateBinding IsPressed}"
                               RenderFocused="{TemplateBinding IsKeyboardFocused}"
                               RenderHot="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}"
                               Content="{TemplateBinding Content}"
                               ContentStringFormat="{TemplateBinding ContentStringFormat}"
                               ContentTemplate="{TemplateBinding ContentTemplate}"
                               ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="TextElement.Foreground" Value="{StaticResource Button.Foreground.Disabled}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="ButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource Button.FocusVisual}"/>
    <Setter Property="Foreground" Value="Black"/>
    <Setter Property="Background" Value="{StaticResource Button.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource Button.Border.Normal}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Padding" Value="1"/>
    <Setter Property="MinWidth" Value="10"/>
    <Setter Property="MinHeight" Value="5"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <aero10:ButtonChrome Style="{StaticResource {x:Type aero10:ButtonChrome}}"
                               Focusable="False"
                               Background="{TemplateBinding Background}"
                               BorderBrush="{TemplateBinding BorderBrush}"
                               BorderThickness="{TemplateBinding BorderThickness}"
                               Foreground="{TemplateBinding Foreground}"
                               Padding="{TemplateBinding Padding}"
                               RenderEnabled="{TemplateBinding IsEnabled}"
                               RenderPressed="{TemplateBinding IsPressed}"
                               RenderFocused="{TemplateBinding IsKeyboardFocused}"
                               RenderDefaulted="{TemplateBinding IsDefaulted}"
                               RenderHot="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}"
                               Content="{TemplateBinding Content}"
                               ContentStringFormat="{TemplateBinding ContentStringFormat}"
                               ContentTemplate="{TemplateBinding ContentTemplate}"
                               ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="TextElement.Foreground" Value="{StaticResource Button.Foreground.Disabled}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="{x:Type ToggleButton}"
         BasedOn="{StaticResource BaseButtonStyle}"/>

  <Style TargetType="{x:Type RepeatButton}"
         BasedOn="{StaticResource BaseButtonStyle}">
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False"/>
  </Style>

  <Style TargetType="{x:Type Button}"
         BasedOn="{StaticResource ButtonStyle}"/>


  <!-- CheckBox ============================================================ -->

  <SolidColorBrush x:Key="CheckBox.Border.Normal" Color="#FF333333" po:Freeze="True"/>
  <Color x:Key="CheckBox.Border.Hot.Color">#FF0078D7</Color>
  <Color x:Key="CheckBox.Border.Pressed.Color">#FF005499</Color>
  <Color x:Key="CheckBox.Border.Disabled.Color">#FFCCCCCC</Color>
  <SolidColorBrush x:Key="CheckBox.Background.Normal" Color="#FFFFFFFF" po:Freeze="True"/>
  <Color x:Key="CheckBox.Background.Hot.Color">#FFFFFFFF</Color>
  <Color x:Key="CheckBox.Background.Pressed.Color">#FFCCE4F7</Color>
  <Color x:Key="CheckBox.Background.Disabled.Color">#FFFFFFFF</Color>
  <SolidColorBrush x:Key="CheckBox.Mark.Normal" Color="#FF202020" po:Freeze="True"/>
  <Color x:Key="CheckBox.Mark.Hot.Color">#FF0078D7</Color>
  <Color x:Key="CheckBox.Mark.Pressed.Color">#FF005499</Color>
  <Color x:Key="CheckBox.OptionMark.Disabled.Color">#FFB7B7B7</Color>
  <Color x:Key="CheckBox.IndeterminateMark.Disabled.Color">#FFCCCCCC</Color>

  <Style x:Key="OptionMarkEmptyFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Width="15" Height="15" Margin="-2,-3,-2,-1"
                     SnapsToDevicePixels="True"
                     Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                     StrokeThickness="1"
                     StrokeDashArray="1 1"
                     StrokeDashOffset="1.5"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="OptionMarkFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="15,1,1,2"
                     SnapsToDevicePixels="True"
                     Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                     StrokeThickness="1"
                     StrokeDashArray="1 1"
                     StrokeDashOffset="1.5"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type CheckBox}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
    <Setter Property="Background" Value="{StaticResource CheckBox.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource CheckBox.Border.Normal}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Padding" Value="3,2,2,3"/>
    <Setter Property="HorizontalAlignment" Value="Left"/>
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <Grid SnapsToDevicePixels="True" Background="Transparent"
                VisualStateManager.CustomVisualStateManager="{x:Static aero:SystemVisualStateManager.Instance}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="MouseOver" GeneratedDuration="0:0:0.225"/>
                  <VisualTransition From="Normal" To="Pressed" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="Normal" To="Disabled" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="MouseOver" To="Normal" GeneratedDuration="0:0:0.225"/>
                  <VisualTransition From="MouseOver" To="Pressed" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="MouseOver" To="Disabled" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="Pressed" To="Normal" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="Pressed" To="Disabled" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="Disabled" To="Normal" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="Disabled" To="MouseOver" GeneratedDuration="0:0:0.255"/>
                  <VisualTransition From="Disabled" To="Pressed" GeneratedDuration="0:0:0.100"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Border.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Background.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="OptionMark"
                                                  Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Mark.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateMark"
                                                  Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Mark.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Border.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Background.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="OptionMark"
                                                  Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Mark.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateMark"
                                                  Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Mark.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Border.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Background.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="OptionMark"
                                                  Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.OptionMark.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateMark"
                                                  Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.IndeterminateMark.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="Border"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}">
              <Grid Width="11" Height="11">
                <Path x:Name="OptionMark" Stretch="None" Opacity="0"
                      Data="F1 M 1.3875,4.6875 3.8875,7.1875 9.6375,1.4375 10.5125,2.3125 3.7625,9.0625 0.3875,5.6875 z"
                      Fill="{StaticResource CheckBox.Mark.Normal}"/>
                <Path x:Name="IndeterminateMark" Stretch="None" Margin="2" Opacity="0"
                      Data="F1 M 0,0 7,0 7,7 0,7 z"
                      Fill="{StaticResource CheckBox.Mark.Normal}"/>
              </Grid>
            </Border>
            <ContentPresenter x:Name="Content"
                              RecognizesAccessKey="True"
                              Grid.Column="1"
                              Margin="{TemplateBinding Padding}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Focusable="False"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="HasContent" Value="False">
              <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkEmptyFocusVisual}"/>
              <Setter Property="Padding" Value="0"/>
            </Trigger>
            <Trigger Property="TextOptions.TextFormattingMode" Value="Display">
              <Setter TargetName="Border" Property="Margin" Value="0,-1,0,0"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter Property="Opacity" Value="1" TargetName="OptionMark"/>
              <Setter Property="Opacity" Value="0" TargetName="IndeterminateMark"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="{x:Null}">
              <Setter Property="Opacity" Value="0" TargetName="OptionMark"/>
              <Setter Property="Opacity" Value="1" TargetName="IndeterminateMark"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>


  <!-- RadioButton ========================================================= -->

  <Style TargetType="{x:Type RadioButton}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
    <Setter Property="Background" Value="{StaticResource CheckBox.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource CheckBox.Border.Normal}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Padding" Value="3,2,2,3"/>
    <Setter Property="HorizontalAlignment" Value="Left"/>
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <Grid SnapsToDevicePixels="True" Background="Transparent"
                VisualStateManager.CustomVisualStateManager="{x:Static aero:SystemVisualStateManager.Instance}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="MouseOver" GeneratedDuration="0:0:0.225"/>
                  <VisualTransition From="Normal" To="Pressed" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="Normal" To="Disabled" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="MouseOver" To="Normal" GeneratedDuration="0:0:0.225"/>
                  <VisualTransition From="MouseOver" To="Pressed" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="MouseOver" To="Disabled" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="Pressed" To="Normal" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="Pressed" To="Disabled" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="Disabled" To="Normal" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="Disabled" To="MouseOver" GeneratedDuration="0:0:0.255"/>
                  <VisualTransition From="Disabled" To="Pressed" GeneratedDuration="0:0:0.100"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Border.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Background.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Border.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Background.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Border.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Background.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="Border"
                    Width="13"
                    Height="13"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    CornerRadius="100">
              <Ellipse x:Name="OptionMark" Margin="2" MinWidth="7" MinHeight="7"
                       Opacity="0" Fill="{Binding BorderBrush, ElementName=Border}"/>
            </Border>
            <ContentPresenter x:Name="Content"
                              RecognizesAccessKey="True"
                              Grid.Column="1"
                              Margin="{TemplateBinding Padding}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Focusable="False"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="HasContent" Value="False">
              <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkEmptyFocusVisual}"/>
              <Setter Property="Padding" Value="0"/>
            </Trigger>
            <Trigger Property="TextOptions.TextFormattingMode" Value="Display">
              <Setter TargetName="Border" Property="Margin" Value="0,-1,0,0"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="OptionMark" Property="Opacity" Value="1"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="{x:Null}">
              <Setter TargetName="OptionMark" Property="Opacity" Value="0.56"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>


  <!-- ComboBox ============================================================ -->

  <SolidColorBrush x:Key="ComboBox.Button.Background.Normal" Color="#FFE1E1E1" po:Freeze="True"/>
  <Color x:Key="ComboBox.Button.Background.Hot.Color">#FFE5F1FB</Color>
  <Color x:Key="ComboBox.Button.Background.Pressed.Color">#FFCCE4F7</Color>
  <Color x:Key="ComboBox.Button.Background.Disabled.Color">#FFCCCCCC</Color>

  <SolidColorBrush x:Key="ComboBox.Button.Border.Normal" Color="#FFADADAD" po:Freeze="True"/>
  <Color x:Key="ComboBox.Button.Border.Hot.Color">#FF0078D7</Color>
  <Color x:Key="ComboBox.Button.Border.Pressed.Color">#FF005499</Color>
  <Color x:Key="ComboBox.Button.Border.Disabled.Color">#FFBFBFBF</Color>

  <SolidColorBrush x:Key="ComboBox.Glyph.Normal" Color="#CC333333" po:Freeze="True"/>
  <Color x:Key="ComboBox.Glyph.Hot.Color">#CC000000</Color>
  <Color x:Key="ComboBox.Glyph.Pressed.Color">#CC333333</Color>
  <Color x:Key="ComboBox.Glyph.Disabled.Color">#CCA2A2A2</Color>

  <SolidColorBrush x:Key="ComboBox.Editable.Background.Normal" Color="#FFFFFFFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="ComboBox.Editable.Border.Normal" Color="#FF7A7A7A" po:Freeze="True"/>
  <SolidColorBrush x:Key="ComboBox.DropDownButton.Background.Normal" Color="Transparent" po:Freeze="True"/>
  <SolidColorBrush x:Key="ComboBox.DropDownButton.Border.Normal" Color="Transparent" po:Freeze="True"/>
  <SolidColorBrush x:Key="ComboBox.ListBox.Background.Hot" Color="#FFFFFFFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="ComboBox.ListBox.Border.Hot" Color="#FF0078D7" po:Freeze="True"/>

  <Geometry x:Key="ComboBox.Glyph">
    F1 M0.65,8.1 1.354,7.396 5.354,11.396 5,11.75 4.646,11.396 8.646,7.396 9.354,8.104 5,12.457 4.646,12.104 0.646,8.104 z
  </Geometry>

  <Style x:Key="ComboBox.ReadOnly.FocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border Margin="{Binding AdornedElement.BorderThickness, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Adorner}}}">
            <Rectangle Margin="2,2,19,2"
                       SnapsToDevicePixels="True"
                       Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                       StrokeThickness="1"
                       StrokeDashArray="1 1"
                       StrokeDashOffset="1.5"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ComboBox.ReadOnly.Button" TargetType="{x:Type ToggleButton}">
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Setter Property="Foreground" Value="Black"/>
    <Setter Property="Background" Value="{StaticResource ComboBox.Button.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ComboBox.Button.Border.Normal}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="IsTabStop" Value="False"/>
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="ClickMode" Value="Press"/>
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border x:Name="Border"
                  Background="{TemplateBinding Background}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  SnapsToDevicePixels="True"
                  VisualStateManager.CustomVisualStateManager="{x:Static aero:SystemVisualStateManager.Instance}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Normal" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Normal" To="Checked" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Normal" To="Disabled" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="MouseOver" To="Normal" GeneratedDuration="0:00:00.635"/>
                  <VisualTransition From="MouseOver" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="MouseOver" To="Checked" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="MouseOver" To="Disabled" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Pressed" To="Normal" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Pressed" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Checked" To="Normal" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Checked" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Checked" To="Pressed" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Checked" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Normal" GeneratedDuration="0:00:00.375"/>
                  <VisualTransition From="Disabled" To="MouseOver" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Pressed" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Checked" GeneratedDuration="0:00:00"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Border.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Background.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Glyph"
                                                  Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Glyph.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Border.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Background.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Glyph"
                                                  Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Glyph.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Border.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Background.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Glyph"
                                                  Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Glyph.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Border.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Background.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Glyph"
                                                  Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Glyph.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="0"
                                  MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
              </Grid.ColumnDefinitions>
              <Border x:Name="DefaultedBorder"
                      Grid.Column="1"
                      BorderThickness="1"
                      BorderBrush="Transparent"
                      SnapsToDevicePixels="True">
                <Path x:Name="Glyph"
                      HorizontalAlignment="Right"
                      VerticalAlignment="Center"
                      Fill="{StaticResource ComboBox.Glyph.Normal}"
                      Data="{StaticResource ComboBox.Glyph}"
                      Margin="0,0,1.5,0"
                      Width="10"
                      Height="19"
                      Stretch="None"/>
              </Border>
              <ContentPresenter x:Name="Content"
                                Content="{TemplateBinding Content}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                IsHitTestVisible="False"
                                Margin="{TemplateBinding Padding}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ComboBox.Editable.TextBox" TargetType="{x:Type TextBox}">
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Setter Property="AllowDrop" Value="True"/>
    <Setter Property="MinWidth" Value="0"/>
    <Setter Property="MinHeight" Value="0"/>
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="aero:TextBoxService.ViewMargin" Value="0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <ScrollViewer x:Name="PART_ContentHost"
                        Focusable="False"
                        HorizontalScrollBarVisibility="Hidden"
                        VerticalScrollBarVisibility="Hidden"
                        Background="Transparent"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ComboBox.Editable.DropDownButton" TargetType="{x:Type ToggleButton}">
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Setter Property="Background" Value="{StaticResource ComboBox.DropDownButton.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ComboBox.DropDownButton.Border.Normal}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="IsTabStop" Value="False"/>
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="ClickMode" Value="Press"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border x:Name="Border"
                  Background="{TemplateBinding Background}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  SnapsToDevicePixels="True"
                  VisualStateManager.CustomVisualStateManager="{x:Static aero:SystemVisualStateManager.Instance}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Normal" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Normal" To="Checked" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Normal" To="Disabled" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="MouseOver" To="Normal" GeneratedDuration="0:00:00.635"/>
                  <VisualTransition From="MouseOver" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="MouseOver" To="Checked" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="MouseOver" To="Disabled" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Pressed" To="Normal" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Pressed" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Checked" To="Normal" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Checked" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Checked" To="Pressed" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Checked" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Normal" GeneratedDuration="0:00:00.375"/>
                  <VisualTransition From="Disabled" To="MouseOver" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Pressed" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Checked" GeneratedDuration="0:00:00"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Border.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Background.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Glyph"
                                                  Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Glyph.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Border.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Background.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Glyph"
                                                  Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Glyph.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Border.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Background.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Glyph"
                                                  Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Glyph.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Glyph"
                                                  Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Glyph.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Path x:Name="Glyph"
                  HorizontalAlignment="Right"
                  VerticalAlignment="Center"
                  Fill="{StaticResource ComboBox.Glyph.Normal}"
                  Data="{StaticResource ComboBox.Glyph}"
                  Width="10"
                  Height="19"
                  Margin="2,1,3,1"
                  Stretch="None"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ControlTemplate x:Key="ComboBox.Template.ReadOnly" TargetType="{x:Type ComboBox}">
    <Grid x:Name="TemplateRoot" SnapsToDevicePixels="True">
      <Popup x:Name="PART_Popup"
             AllowsTransparency="True"
             Margin="1"
             Placement="Bottom"
             IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
             PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
        <aero10:SystemDropShadowChrome x:Name="Shadow"
                                       Color="Transparent"
                                       MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                       MinWidth="{Binding ActualWidth, ElementName=TemplateRoot}">
          <Border x:Name="DropDownBorder"
                  BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                  Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                  BorderThickness="1">
            <ScrollViewer>
              <Grid Background="{Binding Background, ElementName=DropDownBorder}"
                    RenderOptions.ClearTypeHint="Enabled">
                <ItemsPresenter x:Name="ItemsPresenter"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
              </Grid>
            </ScrollViewer>
          </Border>
        </aero10:SystemDropShadowChrome>
      </Popup>
      <ToggleButton x:Name="ToggleButton"
                    Style="{StaticResource ComboBox.ReadOnly.Button}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    Background="{TemplateBinding Background}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Foreground="{TemplateBinding Foreground}"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    Content="{TemplateBinding SelectionBoxItem}"
                    ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                    ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                    ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                    Padding="{TemplateBinding Padding}"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
        <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5"/>
        <Setter TargetName="Shadow" Property="Color" Value="#71000000"/>
      </Trigger>
      <Trigger Property="HasItems" Value="False">
        <Setter TargetName="DropDownBorder" Property="Height" Value="95"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsGrouping" Value="True"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="ComboBox.Template.Editable" TargetType="{x:Type ComboBox}">
    <Grid x:Name="TemplateRoot" SnapsToDevicePixels="True">
      <Popup x:Name="PART_Popup"
             AllowsTransparency="True"
             Placement="Bottom"
             IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
             PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
        <aero10:SystemDropShadowChrome x:Name="Shadow"
                                       Color="Transparent"
                                       MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                       MinWidth="{Binding ActualWidth, ElementName=TemplateRoot}">
          <Border x:Name="DropDownBorder"
                  BorderBrush="{StaticResource ComboBox.ListBox.Border.Hot}"
                  Background="{StaticResource ComboBox.ListBox.Background.Hot}"
                  BorderThickness="1">
            <ScrollViewer>
              <Grid Background="{Binding Background, ElementName=DropDownBorder}"
                    RenderOptions.ClearTypeHint="Enabled">
                <ItemsPresenter x:Name="ItemsPresenter"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
              </Grid>
            </ScrollViewer>
          </Border>
        </aero10:SystemDropShadowChrome>
      </Popup>
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="*"/>
          <ColumnDefinition Width="Auto"
                            MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        </Grid.ColumnDefinitions>
        <aero10:TextBoxChrome Grid.ColumnSpan="2"
                              Style="{StaticResource {x:Type aero10:TextBoxChrome}}"
                              Focusable="False"
                              Background="{TemplateBinding Background}"
                              BorderBrush="{TemplateBinding BorderBrush}"
                              BorderThickness="{TemplateBinding BorderThickness}"
                              Foreground="{TemplateBinding Foreground}"
                              RenderEnabled="{TemplateBinding IsEnabled}"
                              RenderReadOnly="{TemplateBinding IsReadOnly}"
                              RenderFocused="{Binding IsKeyboardFocused, ElementName=PART_EditableTextBox}"
                              RenderHot="{TemplateBinding IsMouseOver}"/>
        <Border Margin="{TemplateBinding BorderThickness}">
          <TextBox x:Name="PART_EditableTextBox"
                   Style="{StaticResource ComboBox.Editable.TextBox}"
                   IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                   Padding="{TemplateBinding Padding}"
                   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ToggleButton x:Name="ToggleButton"
                      Grid.Column="1"
                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                      Style="{StaticResource ComboBox.Editable.DropDownButton}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      HorizontalContentAlignment="Center"/>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
        <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5"/>
        <Setter TargetName="Shadow" Property="Color" Value="#71000000"/>
      </Trigger>
      <Trigger Property="HasItems" Value="False">
        <Setter TargetName="DropDownBorder" Property="Height" Value="95"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsGrouping" Value="True"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style TargetType="{x:Type ComboBox}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource ComboBox.ReadOnly.FocusVisual}"/>
    <Setter Property="Foreground" Value="Black"/>
    <Setter Property="Background" Value="{StaticResource ComboBox.Button.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ComboBox.Button.Border.Normal}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Padding" Value="3,2,2,2"/>
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Template" Value="{StaticResource ComboBox.Template.ReadOnly}"/>
    <Style.Triggers>
      <Trigger Property="IsEditable" Value="True">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template" Value="{StaticResource ComboBox.Template.Editable}"/>
        <Setter Property="Background" Value="{StaticResource ComboBox.Editable.Background.Normal}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ComboBox.Editable.Border.Normal}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Padding" Value="2"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="ComboBoxItem.HighlightFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle SnapsToDevicePixels="True"
                     Stroke="#FFCC6600"
                     StrokeThickness="1"
                     StrokeDashArray="1 1"
                     StrokeDashOffset="1.5"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type ComboBoxItem}">
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="Padding" Value="2,0"/>
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="FocusVisualStyle" Value="{StaticResource ComboBoxItem.HighlightFocusVisual}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <Border BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Background="{TemplateBinding Background}"
                  Padding="{TemplateBinding Padding}"
                  SnapsToDevicePixels="True">
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelected" Value="True"/>
          <Condition Property="IsMouseOver" Value="False"/>
          <Condition Property="IsKeyboardFocused" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelected" Value="False"/>
          <Condition Property="IsMouseOver" Value="False"/>
          <Condition Property="IsKeyboardFocused" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
      </MultiTrigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>


  <!-- ListBox ============================================================= -->

  <SolidColorBrush x:Key="ListBox.Background.Normal" Color="#FFFFFFFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="ListBox.Background.Disabled" Color="#FFFFFFFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="ListBox.Border.Normal" Color="#FF828790" po:Freeze="True"/>
  <SolidColorBrush x:Key="ListBox.Border.Disabled" Color="#FFD9D9D9" po:Freeze="True"/>

  <Style TargetType="{x:Type ListBox}">
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
    <Setter Property="Background" Value="{StaticResource ListBox.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ListBox.Border.Normal}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Padding" Value="1"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBox}">
          <Border x:Name="Border"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  SnapsToDevicePixels="True"
                  Padding="{TemplateBinding Padding}">
            <ScrollViewer Focusable="False">
              <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </ScrollViewer>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Background" Value="{StaticResource ListBox.Background.Disabled}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ListBox.Border.Disabled}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsGrouping" Value="True"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="ListBoxItem.FocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle SnapsToDevicePixels="True"
                     Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                     StrokeThickness="1"
                     StrokeDashArray="1 1"
                     StrokeDashOffset="1.5"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ListBoxItem.HighlightFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle SnapsToDevicePixels="True"
                     Stroke="#FFCC6600"
                     StrokeThickness="1"
                     StrokeDashArray="1 1"
                     StrokeDashOffset="1.5"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type ListBoxItem}">
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="Padding" Value="2,0"/>
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="FocusVisualStyle" Value="{StaticResource ListBoxItem.FocusVisual}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Border BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Background="{TemplateBinding Background}"
                  Padding="{TemplateBinding Padding}"
                  SnapsToDevicePixels="True">
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Selector.IsSelectionActive" Value="True"/>
          <Condition Property="IsSelected" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource ListBoxItem.HighlightFocusVisual}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Selector.IsSelectionActive" Value="False"/>
          <Condition Property="IsSelected" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>


  <!-- ListView ============================================================ -->

  <SolidColorBrush x:Key="Header.Background.Normal" Color="#FFFFFFFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Header.Background.Hot" Color="#FFD9EBF9" po:Freeze="True"/>
  <SolidColorBrush x:Key="Header.Background.Pressed" Color="#FFBCDCF4" po:Freeze="True"/>

  <SolidColorBrush x:Key="Header.Border.Normal" Color="#FFE5E5E5" po:Freeze="True"/>
  <SolidColorBrush x:Key="Header.Border.Hot" Color="#FFD9EBF9" po:Freeze="True"/>
  <SolidColorBrush x:Key="Header.Border.Pressed" Color="#FFBCDCF4" po:Freeze="True"/>

  <SolidColorBrush x:Key="Explorer.ListView.Item.Background.Hot" Color="#1A0089FF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Explorer.ListView.Item.Border.Hot" Color="#1A0089FF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Explorer.ListView.Item.Background.Selected" Color="#32008AFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Explorer.ListView.Item.Border.Selected" Color="#32008AFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Explorer.ListView.Item.Background.HotSelected" Color="#33008CFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Explorer.ListView.Item.Border.HotSelected" Color="#66008CFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Explorer.ListView.Item.Background.SelectedNotFocus" Color="#26000000" po:Freeze="True"/>
  <SolidColorBrush x:Key="Explorer.ListView.Item.Border.SelectedNotFocus" Color="#26000000" po:Freeze="True"/>

  <Style x:Key="GridViewColumnHeaderGripper" TargetType="{x:Type Thumb}">
    <Setter Property="Canvas.Right" Value="-9"/>
    <Setter Property="Width" Value="18"/>
    <Setter Property="Height"
            Value="{Binding ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"/>
    <Setter Property="Padding" Value="0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Background="Transparent"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type GridViewColumnHeader}">
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Background" Value="{x:Null}"/>
    <Setter Property="BorderBrush" Value="{x:Null}"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="Padding" Value="6,4,6,5"/>
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
          <Grid SnapsToDevicePixels="True">
            <aero10:HeaderChrome x:Name="HeaderBorder"
                                 IsHovered="{TemplateBinding IsMouseOver}"
                                 IsPressed="{TemplateBinding IsPressed}"
                                 Background="{TemplateBinding Background}"
                                 BorderBrush="{TemplateBinding BorderBrush}"
                                 BorderThickness="{TemplateBinding BorderThickness}"
                                 Padding ="{TemplateBinding Padding}"
                                 BorderVisibility="Collapsed">
              <ContentPresenter x:Name="HeaderContent"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                RecognizesAccessKey="True"/>
            </aero10:HeaderChrome>
            <Canvas>
              <Thumb x:Name="PART_HeaderGripper"
                     Style="{StaticResource GridViewColumnHeaderGripper}"/>
            </Canvas>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="PART_HeaderGripper" Property="Background" Value="Transparent"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="PART_HeaderGripper" Property="Visibility" Value="Hidden"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Role" Value="Floating">
        <Setter Property="Opacity" Value="0.6"/>
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
              <Canvas x:Name="PART_FloatingHeaderCanvas">
                <Rectangle Width="{TemplateBinding ActualWidth}"
                           Height="{TemplateBinding ActualHeight}"
                           Fill="#FF999999"
                           Opacity="0.6"/>
              </Canvas>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="Role" Value="Padding">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
              <Border Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="0,1,0,1"/>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="Height" Value="Auto">
        <Setter Property="MinHeight" Value="20"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="GridViewItem.FocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle SnapsToDevicePixels="True"
                     Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                     StrokeThickness="1"
                     StrokeDashArray="1 1"
                     StrokeDashOffset="1.5"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="Explorer.GridViewItem.FocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="1"
                     SnapsToDevicePixels="True"
                     Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                     StrokeThickness="1"
                     StrokeDashArray="1 1"
                     StrokeDashOffset="1.5"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="GridViewItemStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource GridViewItem.FocusVisual}"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
    <Setter Property="Margin" Value="0"/>
    <Setter Property="Padding" Value="0,2"/>
    <Setter Property="HorizontalAlignment" Value="Left"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <Border BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Background="{TemplateBinding Background}"
                  Padding="{TemplateBinding Padding}"
                  SnapsToDevicePixels="True">
            <GridViewRowPresenter
              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Selector.IsSelectionActive" Value="True"/>
          <Condition Property="IsSelected" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource ListBoxItem.HighlightFocusVisual}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Selector.IsSelectionActive" Value="False"/>
          <Condition Property="IsSelected" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
      <Trigger Property="aero:ThemeOptions.UseExplorerStyle" Value="True">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource Explorer.GridViewItem.FocusVisual}"/>
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ListViewItem}">
              <Border BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      Background="{TemplateBinding Background}"
                      Padding="{TemplateBinding Padding}"
                      SnapsToDevicePixels="True"
                      HorizontalAlignment="Left">
                <!-- Use a negative margin on the row presenter instead of a
                     reduced padding on the border to be able to use the same
                     padding values for explorer and non-explorer style. -->
                <GridViewRowPresenter
                  Margin="-1"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="aero:ThemeOptions.UseExplorerStyle" Value="True"/>
          <Condition Property="IsMouseOver" Value="True"/>
          <Condition Property="IsSelected" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{StaticResource Explorer.ListView.Item.Background.HotSelected}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Explorer.ListView.Item.Border.HotSelected}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="aero:ThemeOptions.UseExplorerStyle" Value="True"/>
          <Condition Property="IsMouseOver" Value="True"/>
          <Condition Property="IsSelected" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{StaticResource Explorer.ListView.Item.Background.Hot}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Explorer.ListView.Item.Border.Hot}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="aero:ThemeOptions.UseExplorerStyle" Value="True"/>
          <Condition Property="IsMouseOver" Value="False"/>
          <Condition Property="IsSelected" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{StaticResource Explorer.ListView.Item.Background.Selected}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Explorer.ListView.Item.Border.Selected}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="aero:ThemeOptions.UseExplorerStyle" Value="True"/>
          <Condition Property="IsSelected" Value="True"/>
          <Condition Property="Selector.IsSelectionActive" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{StaticResource Explorer.ListView.Item.Background.SelectedNotFocus}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Explorer.ListView.Item.Border.SelectedNotFocus}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}" TargetType="{x:Type ScrollViewer}">
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*"/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <DockPanel Margin="{TemplateBinding Padding}">
              <ScrollViewer DockPanel.Dock="Top"
                            Focusable="False"
                            HorizontalScrollBarVisibility="Hidden"
                            VerticalScrollBarVisibility="Hidden">
                <GridViewHeaderRowPresenter
                  AllowsColumnReorder="{Binding TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}"
                  ColumnHeaderContainerStyle="{Binding TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                  ColumnHeaderContextMenu="{Binding TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                  ColumnHeaderStringFormat="{Binding TemplatedParent.View.ColumnHeaderStringFormat, RelativeSource={RelativeSource TemplatedParent}}"
                  ColumnHeaderTemplate="{Binding TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                  ColumnHeaderTemplateSelector="{Binding TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                  ColumnHeaderToolTip="{Binding TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}"
                  Columns="{Binding TemplatedParent.View.Columns, RelativeSource={RelativeSource TemplatedParent}}"
                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
              </ScrollViewer>
              <ScrollContentPresenter
                x:Name="PART_ScrollContentPresenter"
                CanContentScroll="{TemplateBinding CanContentScroll}"
                Content="{TemplateBinding Content}"
                ContentTemplate="{TemplateBinding ContentTemplate}"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                KeyboardNavigation.DirectionalNavigation="Local"/>
            </DockPanel>
            <ScrollBar x:Name="PART_HorizontalScrollBar"
                       Grid.Row="1"
                       Cursor="Arrow"
                       Margin="0"
                       Minimum="0.0"
                       Maximum="{TemplateBinding ScrollableWidth}"
                       Orientation="Horizontal"
                       Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                       ViewportSize="{TemplateBinding ViewportWidth}"
                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
            <ScrollBar x:Name="PART_VerticalScrollBar"
                       Grid.Column="1"
                       Cursor="Arrow"
                       Margin="0"
                       Minimum="0.0"
                       Maximum="{TemplateBinding ScrollableHeight}"
                       Orientation="Vertical"
                       Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                       ViewportSize="{TemplateBinding ViewportHeight}"
                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
            <DockPanel Grid.Column="1" Grid.Row="1"
                       Background="{Binding Background, ElementName=PART_VerticalScrollBar}"
                       LastChildFill="False"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ControlTemplate x:Key="GridViewTemplate" TargetType="{x:Type ListView}">
    <Border Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            Padding="{TemplateBinding Padding}"
            SnapsToDevicePixels="True">
      <ScrollViewer Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
      </ScrollViewer>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsGrouping" Value="True">
        <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="{x:Static GridView.GridViewItemContainerStyleKey}" TargetType="{x:Type ListViewItem}"
         BasedOn="{StaticResource GridViewItemStyle}"/>

  <Style x:Key="{x:Static GridView.GridViewStyleKey}" TargetType="{x:Type ListView}">
    <Setter Property="Background" Value="{StaticResource ListBox.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ListBox.Border.Normal}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
    <Setter Property="Padding" Value="1"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template" Value="{StaticResource GridViewTemplate}"/>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Background" Value="{StaticResource ListBox.Background.Disabled}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ListBox.Border.Disabled}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsGrouping" Value="True"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>


  <!-- Menu ================================================================ -->

  <SolidColorBrush x:Key="Menu.BarBackground.Background" Color="#FFFFFFFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.BarBackground.Border" Color="#FFF2F2F2" po:Freeze="True"/>

  <SolidColorBrush x:Key="Menu.BarItem.Normal.Foreground" Color="#FF000000" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.BarItem.Hot.Background" Color="#1A0089FF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.BarItem.Hot.Border" Color="#33008CFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.BarItem.Pressed.Background" Color="#33008CFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.BarItem.Pressed.Border" Color="#66008CFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.BarItem.Disabled.Foreground" Color="#FF707070" po:Freeze="True"/>

  <SolidColorBrush x:Key="Menu.Popup.Background" Color="#FFF2F2F2" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.Popup.Border" Color="#FFCCCCCC" po:Freeze="True"/>

  <SolidColorBrush x:Key="Menu.PopupItem.Normal.Foreground" Color="#FF000000" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupItem.Selected.Background" Color="#3D269FD9" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupItem.Selected.Border" Color="#FF26A0DA" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupItem.Hot.Background" Color="#66008CFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupItem.Hot.Border" Color="#66008CFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupItem.Disabled.Foreground" Color="#FF707070" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupItem.DisabledHot.Background" Color="#0D000000" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupItem.DisabledHot.Border" Color="#0D000000" po:Freeze="True"/>

  <SolidColorBrush x:Key="Menu.PopupSeparator" Color="#FFD7D7D7" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupGutter.Background" Color="#FFF0F0F0" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupGutter.Border" Color="#FFF0F0F0" po:Freeze="True"/>

  <SolidColorBrush x:Key="Menu.PopupCheckBackground.Normal.Background" Color="#66008CFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupCheckBackground.Normal.Border" Color="#66008CFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupCheckBackground.Disabled.Background" Color="#0D000000" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupCheckBackground.Disabled.Border" Color="#0D000000" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupCheck.Normal.Foreground" Color="#FF333333" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupCheck.Disabled.Foreground" Color="#FFA3A3A3" po:Freeze="True"/>

  <SolidColorBrush x:Key="Menu.PopupSubmenu.Normal.Foreground" Color="#FF000000" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupSubmenu.Disabled.Foreground" Color="#FF707070" po:Freeze="True"/>

  <aero10:MenuScrollingEnabledConverter x:Key="MenuScrollingEnabledConverter"/>
  <DrawingImage x:Key="Menu.UpArrowGlyph">
    <DrawingImage.Drawing>
      <DrawingGroup>
        <GeometryDrawing Brush="Transparent" Geometry="M 0,0 10,0 10,6 0,6 z"/>
        <GeometryDrawing Brush="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" Geometry="M 0,5 4.5,0 9,5 z"/>
      </DrawingGroup>
    </DrawingImage.Drawing>
  </DrawingImage>
  <DrawingImage x:Key="Menu.UpArrowGlyphDisabled">
    <DrawingImage.Drawing>
      <DrawingGroup>
        <GeometryDrawing Brush="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" Geometry="M 1,6 5.5,1 10,6 z"/>
        <GeometryDrawing Brush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" Geometry="M 0,5 4.5,0 9,5 z"/>
      </DrawingGroup>
    </DrawingImage.Drawing>
  </DrawingImage>
  <DrawingImage x:Key="Menu.DownArrowGlyph">
    <DrawingImage.Drawing>
      <DrawingGroup>
        <GeometryDrawing Brush="Transparent" Geometry="M 0,0 10,0 10,6 0,6 z"/>
        <GeometryDrawing Brush="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" Geometry="M 0,0 4.5,5 9,0 z"/>
      </DrawingGroup>
    </DrawingImage.Drawing>
  </DrawingImage>
  <DrawingImage x:Key="Menu.DownArrowGlyphDisabled">
    <DrawingImage.Drawing>
      <DrawingGroup>
        <GeometryDrawing Brush="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" Geometry="M 1,1 5.5,6 10,1 z"/>
        <GeometryDrawing Brush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" Geometry="M 0,0 4.5,5 9,0 z"/>
      </DrawingGroup>
    </DrawingImage.Drawing>
  </DrawingImage>
  <Geometry x:Key="Menu.PopupSubmenu.Glyph">M 0,-0.5 3.5,3 0,6.5 -0.5,6 2.5,3 -0.5,0 z</Geometry>
  <Geometry x:Key="Menu.CheckmarkGlyph">F1 M 4.1875,6.6875 6.6875,9.1875 12.4375,3.4375 13.3125,4.3125 6.5625,11.0625 3.1875,7.6875 z</Geometry>

  <ControlTemplate x:Key="{ComponentResourceKey {x:Type FrameworkElement}, SubmenuContent}"
                   TargetType="{x:Type ContentControl}">
    <Border Background="{TemplateBinding Menu.Background}"
            BorderBrush="{TemplateBinding Menu.BorderBrush}"
            BorderThickness="1"
            Padding="2">
      <Border Background="{StaticResource Menu.Popup.Background}">
        <ContentPresenter/>
      </Border>
    </Border>
  </ControlTemplate>

  <Style x:Key="MenuScrollUpButton" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
    <Setter Property="ClickMode" Value="Hover"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border SnapsToDevicePixels="True" Background="Transparent">
            <!-- NB: The Windows kernel renders the scroll buttons using the
                 Marlett font but using a geometry is easier. -->
            <Image x:Name="Glyph"
                   Source="{StaticResource Menu.UpArrowGlyph}"
                   Width="10"
                   Height="6"
                   Margin="18,5,18,6"
                   Stretch="None"
                   RenderOptions.EdgeMode="Aliased"
                   HorizontalAlignment="Left"
                   VerticalAlignment="Center"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Glyph" Property="Source" Value="{StaticResource Menu.UpArrowGlyphDisabled}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="MenuScrollDownButton" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
    <Setter Property="ClickMode" Value="Hover"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border SnapsToDevicePixels="True" Background="Transparent">
            <!-- NB: The Windows kernel renders the scroll buttons using the
                 Marlett font but using a geometry is easier. -->
            <Image x:Name="Glyph"
                   Source="{StaticResource Menu.DownArrowGlyph}"
                   Width="10"
                   Height="6"
                   Margin="18,7,18,4"
                   Stretch="None"
                   RenderOptions.EdgeMode="Aliased"
                   HorizontalAlignment="Left"
                   VerticalAlignment="Center"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Glyph" Property="Source" Value="{StaticResource Menu.DownArrowGlyphDisabled}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{ComponentResourceKey {x:Type FrameworkElement}, MenuScrollViewer}"
         TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
    <Setter Property="HorizontalScrollBarVisibility" Value="Hidden"/>
    <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition Height="*"/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <ScrollContentPresenter Grid.Row="1"
                                    Margin="{TemplateBinding Padding}"
                                    CanContentScroll="{TemplateBinding CanContentScroll}"/>
            <RepeatButton Style="{StaticResource MenuScrollUpButton}"
                          Command="{x:Static ScrollBar.LineUpCommand}"
                          CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                          Focusable="False"
                          Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}">
              <RepeatButton.IsEnabled>
                <MultiBinding Converter="{StaticResource MenuScrollingEnabledConverter}"
                              ConverterParameter="0">
                  <MultiBinding.FallbackValue>
                    <system:Boolean>False</system:Boolean>
                  </MultiBinding.FallbackValue>
                  <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                  <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                  <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                </MultiBinding>
              </RepeatButton.IsEnabled>
            </RepeatButton>
            <RepeatButton Grid.Row="2"
                          Style="{StaticResource MenuScrollDownButton}"
                          Command="{x:Static ScrollBar.LineDownCommand}"
                          CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                          Focusable="False"
                          Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}">
              <RepeatButton.IsEnabled>
                <MultiBinding Converter="{StaticResource MenuScrollingEnabledConverter}"
                              ConverterParameter="100">
                  <MultiBinding.FallbackValue>
                    <system:Boolean>False</system:Boolean>
                  </MultiBinding.FallbackValue>
                  <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                  <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                  <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                </MultiBinding>
              </RepeatButton.IsEnabled>
            </RepeatButton>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
    <Setter Property="Background" Value="{StaticResource Menu.PopupSeparator}"/>
    <Setter Property="BorderBrush" Value="{StaticResource Menu.PopupSeparator}"/>
    <Setter Property="MinHeight" Value="7"/>
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Separator}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Margin="28,3,0,3"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type Separator}">
    <Setter Property="Background" Value="{StaticResource Menu.PopupSeparator}"/>
    <Setter Property="BorderBrush" Value="{StaticResource Menu.PopupSeparator}"/>
    <Setter Property="MinHeight" Value="3"/>
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Margin="28,1,0,1"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ControlTemplate x:Key="{ComponentResourceKey {x:Type MenuItem}, TopLevelItemTemplateKey}"
                   TargetType="{x:Type MenuItem}">
    <Border x:Name="TemplateRoot"
            SnapsToDevicePixels="True"
            BorderThickness="{TemplateBinding BorderThickness}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}">
      <Grid VerticalAlignment="Center">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <ContentPresenter x:Name="Icon"
                          ContentSource="Icon"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                          VerticalAlignment="Center"
                          HorizontalAlignment="Center"
                          Width="16"
                          Height="16"
                          Margin="2"/>
        <Path x:Name="GlyphBorder"
              Data="{StaticResource Menu.CheckmarkGlyph}"
              FlowDirection="LeftToRight"
              Margin="2,-2"
              Width="16"
              Height="16"
              Visibility="Collapsed"
              VerticalAlignment="Center"
              Fill="{StaticResource Menu.PopupCheck.Normal.Foreground}"/>
        <ContentPresenter Grid.Column="1"
                          ContentSource="Header"
                          RecognizesAccessKey="True"
                          Margin="{TemplateBinding Padding}"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="Icon" Value="{x:Null}">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="GlyphBorder" Property="Visibility" Value="Visible"/>
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
      </Trigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsActive, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
                     Value="False"/>
          <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                     Value="False"/>
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter TargetName="TemplateRoot" Property="TextElement.Foreground"
                  Value="{StaticResource Menu.BarItem.Disabled.Foreground}"/>
          <Setter TargetName="GlyphBorder" Property="Fill"
                  Value="{StaticResource Menu.BarItem.Disabled.Foreground}"/>
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="TemplateRoot" Property="Background"
                Value="{StaticResource Menu.BarItem.Hot.Background}"/>
        <Setter TargetName="TemplateRoot" Property="BorderBrush"
                Value="{StaticResource Menu.BarItem.Hot.Border}"/>
      </Trigger>
      <Trigger Property="IsSubmenuOpen" Value="True">
        <Setter TargetName="TemplateRoot" Property="Background"
                Value="{StaticResource Menu.BarItem.Pressed.Background}"/>
        <Setter TargetName="TemplateRoot" Property="BorderBrush"
                Value="{StaticResource Menu.BarItem.Pressed.Border}"/>
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="TemplateRoot" Property="Background"
                Value="{StaticResource Menu.BarItem.Pressed.Background}"/>
        <Setter TargetName="TemplateRoot" Property="BorderBrush"
                Value="{StaticResource Menu.BarItem.Pressed.Border}"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="TemplateRoot" Property="TextElement.Foreground"
                Value="{StaticResource Menu.BarItem.Disabled.Foreground}"/>
        <Setter TargetName="GlyphBorder" Property="Fill"
                Value="{StaticResource Menu.BarItem.Disabled.Foreground}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="{ComponentResourceKey {x:Type MenuItem}, TopLevelHeaderTemplateKey}"
                   TargetType="{x:Type MenuItem}">
    <Border x:Name="TemplateRoot"
            SnapsToDevicePixels="True"
            BorderThickness="{TemplateBinding BorderThickness}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}">
      <Grid VerticalAlignment="Center">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <ContentPresenter x:Name="Icon"
                          ContentSource="Icon"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                          VerticalAlignment="Center"
                          HorizontalAlignment="Center"
                          Width="16"
                          Height="16"
                          Margin="2"/>
        <Path x:Name="GlyphBorder"
              Data="{StaticResource Menu.CheckmarkGlyph}"
              FlowDirection="LeftToRight"
              Margin="2"
              Width="16"
              Height="16"
              Visibility="Collapsed"
              VerticalAlignment="Center"
              Fill="{TemplateBinding Menu.Foreground}"/>
        <ContentPresenter Grid.Column="1"
                          ContentSource="Header"
                          RecognizesAccessKey="True"
                          Margin="{TemplateBinding Padding}"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        <Popup x:Name="PART_Popup"
               AllowsTransparency="True"
               Focusable="False"
               IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
               Placement="Bottom"
               PlacementTarget="{Binding ElementName=TemplateRoot}">
          <aero10:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
            <Border x:Name="SubMenuBorder"
                    Background="{StaticResource Menu.Popup.Background}"
                    BorderBrush="{StaticResource Menu.Popup.Border}"
                    BorderThickness="1"
                    Padding="2">
              <ScrollViewer x:Name="SubMenuScrollViewer"
                            Style="{DynamicResource {ComponentResourceKey {x:Type FrameworkElement}, MenuScrollViewer}}">
                <Grid Background="{Binding Background, ElementName=SubMenuBorder}"
                      RenderOptions.ClearTypeHint="Enabled">
                  <Border x:Name="PopupGutter"
                          HorizontalAlignment="Left"
                          Width="28"
                          Background="{StaticResource Menu.PopupGutter.Background}"
                          BorderBrush="{StaticResource Menu.PopupGutter.Border}"
                          BorderThickness="0,0,1,0"/>
                  <ItemsPresenter x:Name="ItemsPresenter"
                                  KeyboardNavigation.DirectionalNavigation="Cycle"
                                  KeyboardNavigation.TabNavigation="Cycle"
                                  Grid.IsSharedSizeScope="True"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                </Grid>
              </ScrollViewer>
            </Border>
          </aero10:SystemDropShadowChrome>
        </Popup>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsSuspendingPopupAnimation" Value="True">
        <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None"/>
      </Trigger>
      <Trigger Property="Icon" Value="{x:Null}">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="GlyphBorder" Property="Visibility" Value="Visible"/>
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
      </Trigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsActive, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
                     Value="False"/>
          <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                     Value="False"/>
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter TargetName="TemplateRoot" Property="TextElement.Foreground"
                  Value="{StaticResource Menu.BarItem.Disabled.Foreground}"/>
          <Setter TargetName="GlyphBorder" Property="Fill"
                  Value="{StaticResource Menu.BarItem.Disabled.Foreground}"/>
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="TemplateRoot" Property="Background"
                Value="{StaticResource Menu.BarItem.Hot.Background}"/>
        <Setter TargetName="TemplateRoot" Property="BorderBrush"
                Value="{StaticResource Menu.BarItem.Hot.Border}"/>
      </Trigger>
      <Trigger Property="IsSubmenuOpen" Value="True">
        <Setter TargetName="TemplateRoot" Property="Background"
                Value="{StaticResource Menu.BarItem.Pressed.Background}"/>
        <Setter TargetName="TemplateRoot" Property="BorderBrush"
                Value="{StaticResource Menu.BarItem.Pressed.Border}"/>
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="TemplateRoot" Property="Background"
                Value="{StaticResource Menu.BarItem.Pressed.Background}"/>
        <Setter TargetName="TemplateRoot" Property="BorderBrush"
                Value="{StaticResource Menu.BarItem.Pressed.Border}"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="TemplateRoot" Property="TextElement.Foreground"
                Value="{StaticResource Menu.BarItem.Disabled.Foreground}"/>
        <Setter TargetName="GlyphBorder" Property="Fill"
                Value="{StaticResource Menu.BarItem.Disabled.Foreground}"/>
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
        <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5"/>
        <Setter TargetName="Shdw" Property="Color" Value="#71000000"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="{ComponentResourceKey {x:Type MenuItem}, SubmenuItemTemplateKey}"
                   TargetType="{x:Type MenuItem}">
    <Border x:Name="TemplateRoot"
            SnapsToDevicePixels="True"
            Height="22"
            BorderThickness="{TemplateBinding BorderThickness}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}">
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" MinWidth="20" SharedSizeGroup="MenuItemIconColumnGroup"/>
          <ColumnDefinition Width="11"/>
          <ColumnDefinition Width="*" MinWidth="11"/>
          <ColumnDefinition Width="34"/>
          <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
          <ColumnDefinition Width="17" SharedSizeGroup="MenuItemArrowColumnGroup"/>
        </Grid.ColumnDefinitions>
        <ContentPresenter x:Name="Icon"
                          ContentSource="Icon"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                          VerticalAlignment="Center"
                          HorizontalAlignment="Left"
                          Width="16"
                          Height="16"
                          Margin="2"/>
        <Border x:Name="GlyphBorder"
                Background="{StaticResource Menu.PopupCheckBackground.Normal.Background}"
                BorderBrush="{StaticResource Menu.PopupCheckBackground.Normal.Border}"
                BorderThickness="1"
                Width="22"
                Height="22"
                Margin="-1"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                ClipToBounds="False"
                Visibility="Hidden">
          <Path x:Name="Glyph"
                Data="{StaticResource Menu.CheckmarkGlyph}"
                FlowDirection="LeftToRight"
                Height="16"
                Width="16"
                Margin="2"
                HorizontalAlignment="Left"
                VerticalAlignment="Top"
                Fill="{StaticResource Menu.PopupCheck.Normal.Foreground}"/>
        </Border>
        <Border x:Name="MenuHeaderContainer"
                Grid.Column="2"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
          <ContentPresenter HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            ContentSource="Header"
                            RecognizesAccessKey="True"
                            Margin="{TemplateBinding Padding}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        </Border>
        <Border x:Name="MenuGestureContainer" Grid.Column="4">
          <TextBlock Text="{TemplateBinding InputGestureText}"
                     Margin="{TemplateBinding Padding}"
                     VerticalAlignment="Center"/>
        </Border>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <DataTrigger Binding="{Binding Header, RelativeSource={RelativeSource Self}, Converter={StaticResource TypeOfConverter}}"
                   Value="{x:Type system:String}">
        <Setter TargetName="MenuHeaderContainer" Property="Margin" Value="0,-1,0,0"/>
        <Setter TargetName="MenuGestureContainer" Property="Margin" Value="0,-1,0,0"/>
      </DataTrigger>
      <Trigger Property="Icon" Value="{x:Null}">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="GlyphBorder" Property="Visibility" Value="Visible"/>
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="IsHighlighted" Value="True">
        <Setter TargetName="TemplateRoot" Property="Background"
                Value="{StaticResource Menu.PopupItem.Hot.Background}"/>
        <Setter TargetName="TemplateRoot" Property="BorderBrush"
                Value="{StaticResource Menu.PopupItem.Hot.Border}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsEnabled" Value="False"/>
          <Condition Property="IsHighlighted" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="TemplateRoot" Property="Background"
                Value="{StaticResource Menu.PopupItem.DisabledHot.Background}"/>
        <Setter TargetName="TemplateRoot" Property="BorderBrush"
                Value="{StaticResource Menu.PopupItem.DisabledHot.Border}"/>
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="TemplateRoot" Property="TextElement.Foreground"
                Value="{StaticResource Menu.PopupItem.Disabled.Foreground}"/>
        <Setter TargetName="Glyph" Property="Fill"
                Value="{StaticResource Menu.PopupCheck.Disabled.Foreground}"/>
        <Setter TargetName="GlyphBorder" Property="Background"
                Value="{StaticResource Menu.PopupCheckBackground.Disabled.Background}"/>
        <Setter TargetName="GlyphBorder" Property="BorderBrush"
                Value="{StaticResource Menu.PopupCheckBackground.Disabled.Border}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="{ComponentResourceKey {x:Type MenuItem}, SubmenuHeaderTemplateKey}"
                   TargetType="{x:Type MenuItem}">
    <Border x:Name="TemplateRoot"
            SnapsToDevicePixels="True"
            Height="22"
            BorderThickness="{TemplateBinding BorderThickness}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}">
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" MinWidth="20" SharedSizeGroup="MenuItemIconColumnGroup"/>
          <ColumnDefinition Width="11"/>
          <ColumnDefinition Width="*" MinWidth="11"/>
          <ColumnDefinition Width="34"/>
          <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
          <ColumnDefinition Width="17" SharedSizeGroup="MenuItemArrowColumnGroup"/>
        </Grid.ColumnDefinitions>
        <ContentPresenter x:Name="Icon"
                          ContentSource="Icon"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                          VerticalAlignment="Center"
                          HorizontalAlignment="Left"
                          Width="16"
                          Height="16"
                          Margin="2"/>
        <Border x:Name="GlyphBorder"
                Background="{StaticResource Menu.PopupCheckBackground.Normal.Background}"
                BorderBrush="{StaticResource Menu.PopupCheckBackground.Normal.Border}"
                BorderThickness="1"
                Width="22"
                Height="22"
                Margin="-1"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                ClipToBounds="False"
                Visibility="Hidden">
          <Path x:Name="Glyph"
                Data="{StaticResource Menu.CheckmarkGlyph}"
                FlowDirection="LeftToRight"
                Height="16"
                Width="16"
                Margin="2"
                HorizontalAlignment="Left"
                VerticalAlignment="Top"
                Fill="{StaticResource Menu.PopupCheck.Normal.Foreground}"/>
        </Border>
        <Border x:Name="MenuHeaderContainer"
                Grid.Column="2"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
          <ContentPresenter HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            ContentSource="Header"
                            RecognizesAccessKey="True"
                            Margin="{TemplateBinding Padding}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        </Border>
        <Border x:Name="MenuGestureContainer" Grid.Column="4">
          <TextBlock Text="{TemplateBinding InputGestureText}"
                     Margin="{TemplateBinding Padding}"
                     VerticalAlignment="Center"/>
        </Border>
        <Path x:Name="RightArrow"
              Grid.Column="5"
              Data="{StaticResource Menu.PopupSubmenu.Glyph}"
              Margin="5,0,0,1"
              VerticalAlignment="Center"
              HorizontalAlignment="Left"
              Fill="{StaticResource Menu.PopupSubmenu.Normal.Foreground}"
              UseLayoutRounding="False"/>
        <Popup x:Name="PART_Popup"
               AllowsTransparency="True"
               Focusable="False"
               IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
               Placement="Right"
               HorizontalOffset="-2"
               VerticalOffset="-4">
          <aero10:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
            <Border x:Name="SubMenuBorder"
                    Background="{StaticResource Menu.Popup.Background}"
                    BorderBrush="{StaticResource Menu.Popup.Border}"
                    BorderThickness="1"
                    Padding="2">
              <ScrollViewer x:Name="SubMenuScrollViewer"
                            Style="{DynamicResource {ComponentResourceKey {x:Type FrameworkElement}, MenuScrollViewer}}">
                <Grid Background="{Binding Background, ElementName=SubMenuBorder}"
                      RenderOptions.ClearTypeHint="Enabled">
                  <Border x:Name="PopupGutter"
                          HorizontalAlignment="Left"
                          Width="28"
                          Background="{StaticResource Menu.PopupGutter.Background}"
                          BorderBrush="{StaticResource Menu.PopupGutter.Border}"
                          BorderThickness="0,0,1,0"/>
                  <ItemsPresenter x:Name="ItemsPresenter"
                                  KeyboardNavigation.DirectionalNavigation="Cycle"
                                  KeyboardNavigation.TabNavigation="Cycle"
                                  Grid.IsSharedSizeScope="True"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                </Grid>
              </ScrollViewer>
            </Border>
          </aero10:SystemDropShadowChrome>
        </Popup>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <DataTrigger Binding="{Binding Header, RelativeSource={RelativeSource Self}, Converter={StaticResource TypeOfConverter}}"
                   Value="{x:Type system:String}">
        <Setter TargetName="MenuHeaderContainer" Property="Margin" Value="0,-1,0,0"/>
        <Setter TargetName="MenuGestureContainer" Property="Margin" Value="0,-1,0,0"/>
      </DataTrigger>
      <Trigger Property="Icon" Value="{x:Null}">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="GlyphBorder" Property="Visibility" Value="Visible"/>
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="IsHighlighted" Value="True">
        <Setter TargetName="TemplateRoot" Property="Background"
                Value="{StaticResource Menu.PopupItem.Hot.Background}"/>
        <Setter TargetName="TemplateRoot" Property="BorderBrush"
                Value="{StaticResource Menu.PopupItem.Hot.Border}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsEnabled" Value="False"/>
          <Condition Property="IsHighlighted" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="TemplateRoot" Property="Background"
                Value="{StaticResource Menu.PopupItem.DisabledHot.Background}"/>
        <Setter TargetName="TemplateRoot" Property="BorderBrush"
                Value="{StaticResource Menu.PopupItem.DisabledHot.Border}"/>
      </MultiTrigger>
      <Trigger Property="IsSuspendingPopupAnimation" Value="True">
        <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None"/>
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
        <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5"/>
        <Setter TargetName="Shdw" Property="Color" Value="#71000000"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="TemplateRoot" Property="TextElement.Foreground"
                Value="{StaticResource Menu.PopupItem.Disabled.Foreground}"/>
        <Setter TargetName="Glyph" Property="Fill"
                Value="{StaticResource Menu.PopupCheck.Disabled.Foreground}"/>
        <Setter TargetName="GlyphBorder" Property="Background"
                Value="{StaticResource Menu.PopupCheckBackground.Disabled.Background}"/>
        <Setter TargetName="GlyphBorder" Property="BorderBrush"
                Value="{StaticResource Menu.PopupCheckBackground.Disabled.Border}"/>
        <Setter TargetName="RightArrow" Property="Fill"
                Value="{StaticResource Menu.PopupSubmenu.Disabled.Foreground}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style TargetType="{x:Type MenuItem}">
    <Setter Property="HorizontalContentAlignment"
            Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="VerticalContentAlignment"
            Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Template"
            Value="{DynamicResource {ComponentResourceKey {x:Type MenuItem}, SubmenuItemTemplateKey}}"/>
    <Style.Triggers>
      <Trigger Property="Role" Value="TopLevelHeader">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource Menu.BarItem.Normal.Foreground}"/>
        <Setter Property="Template"
                Value="{DynamicResource {ComponentResourceKey {x:Type MenuItem}, TopLevelHeaderTemplateKey}}"/>
        <Setter Property="Padding" Value="6,1"/>
      </Trigger>
      <Trigger Property="Role" Value="TopLevelItem">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource Menu.BarItem.Normal.Foreground}"/>
        <Setter Property="Template"
                Value="{DynamicResource {ComponentResourceKey {x:Type MenuItem}, TopLevelItemTemplateKey}}"/>
        <Setter Property="Padding" Value="6,1"/>
      </Trigger>
      <Trigger Property="Role" Value="SubmenuHeader">
        <Setter Property="Template"
                Value="{DynamicResource {ComponentResourceKey {x:Type MenuItem}, SubmenuHeaderTemplateKey}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="{x:Type Menu}">
    <Setter Property="Background" Value="{StaticResource Menu.BarBackground.Background}"/>
    <Setter Property="BorderBrush" Value="{StaticResource Menu.BarBackground.Border}"/>
    <!-- Aero has a 1px bottom border that overlaps the content area, hence the
         negative bottom padding. uxtheme.dll (in CThemeWnd::NcPaint) paints
         an additional border between a window's menu and client area. This line
         technically has an unknown height of (SM_CYMENU - SM_CYMENUSIZE), but
         SM_CYMENU is defined as (SM_CYMENUSIZE + SM_CYBORDER), and SM_CYBORDER
         is fixed to 1. -->
    <Setter Property="BorderThickness" Value="0,0,0,2"/>
    <Setter Property="Padding" Value="0,0,0,-1"/>
    <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
    <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
    <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
    <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Menu}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  SnapsToDevicePixels="True">
            <ItemsPresenter
              x:Name="Items"
              Margin="{TemplateBinding Padding}"
              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type ContextMenu}">
    <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
    <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
    <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
    <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Background" Value="{StaticResource Menu.Popup.Background}"/>
    <Setter Property="BorderBrush" Value="{StaticResource Menu.Popup.Border}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Padding" Value="2"/>
    <Setter Property="Grid.IsSharedSizeScope" Value="True"/>
    <Setter Property="HasDropShadow" Value="{DynamicResource {x:Static SystemParameters.DropShadowKey}}"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContextMenu}">
          <aero10:SystemDropShadowChrome x:Name="Shdw"
                                         Color="Transparent"
                                         SnapsToDevicePixels="True">
            <Border x:Name="ContextMenuBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">
              <ScrollViewer x:Name="ContextMenuScrollViewer"
                            Margin="0"
                            Style="{DynamicResource {ComponentResourceKey {x:Type FrameworkElement}, MenuScrollViewer}}">
                <Grid Background="{Binding Background, ElementName=ContextMenuBorder}"
                      RenderOptions.ClearTypeHint="Enabled">
                  <Border x:Name="PopupGutter"
                          HorizontalAlignment="Left"
                          Width="28"
                          Margin="2,2,0,2"
                          Background="{StaticResource Menu.PopupGutter.Background}"
                          BorderBrush="{StaticResource Menu.PopupGutter.Border}"
                          BorderThickness="0,0,1,0"/>
                  <ItemsPresenter x:Name="ItemsPresenter"
                                  Margin="{TemplateBinding Padding}"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  KeyboardNavigation.DirectionalNavigation="Cycle"/>
                </Grid>
              </ScrollViewer>
            </Border>
          </aero10:SystemDropShadowChrome>
          <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" Value="True">
              <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5"/>
              <Setter TargetName="Shdw" Property="Color" Value="#71000000"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <!-- ScrollBar =========================================================== -->

  <SolidColorBrush x:Key="ScrollBar.Background" Color="#FFF0F0F0" po:Freeze="True"/>
  <SolidColorBrush x:Key="ScrollBar.Border.Light" Color="#FFFFFFFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="ScrollBar.Border.Dark" Color="#FFF0F0F0" po:Freeze="True"/>

  <SolidColorBrush x:Key="ScrollBar.Thumb.Background.Normal" Color="#FFCDCDCD" po:Freeze="True"/>
  <Color x:Key="ScrollBar.Thumb.Background.Hot.Color">#FFA6A6A6</Color>
  <Color x:Key="ScrollBar.Thumb.Background.Pressed.Color">#FF606060</Color>
  <Color x:Key="ScrollBar.Thumb.Background.Disabled.Color">#FFF0F0F0</Color>
  <Color x:Key="ScrollBar.Thumb.Background.Hover.Color">#FFC0C0C0</Color>

  <SolidColorBrush x:Key="ScrollBar.ArrowButton.Glyph.Normal" Color="#FF606060" po:Freeze="True"/>
  <Color x:Key="ScrollBar.ArrowButton.Glyph.Hot.Color">#FF000000</Color>
  <Color x:Key="ScrollBar.ArrowButton.Glyph.Pressed.Color">#FFFFFFFF</Color>
  <Color x:Key="ScrollBar.ArrowButton.Glyph.Disabled.Color">#FFBFBFBF</Color>
  <Color x:Key="ScrollBar.ArrowButton.Glyph.Hover.Color">#FF606060</Color>

  <SolidColorBrush x:Key="ScrollBar.ArrowButton.Background.Normal" Color="#FFF0F0F0" po:Freeze="True"/>
  <Color x:Key="ScrollBar.ArrowButton.Background.Hot.Color">#FFDADADA</Color>
  <Color x:Key="ScrollBar.ArrowButton.Background.Pressed.Color">#FF606060</Color>
  <Color x:Key="ScrollBar.ArrowButton.Background.Disabled.Color">#FFF0F0F0</Color>
  <Color x:Key="ScrollBar.ArrowButton.Background.Hover.Color">#FFF0F0F0</Color>

  <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="IsTabStop" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Rectangle Fill="{TemplateBinding Background}"
                     Width="{TemplateBinding Width}"
                     Height="{TemplateBinding Height}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ScrollBarButtonUp" TargetType="{x:Type RepeatButton}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="IsTabStop" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <aero10:ScrollBarChrome x:Name="Border"
                                  SnapsToDevicePixels="True"
                                  Orientation="Vertical"
                                  Background="{StaticResource ScrollBar.ArrowButton.Background.Normal}"
                                  LightBorderBrush="{StaticResource ScrollBar.Border.Light}"
                                  DarkBorderBrush="{StaticResource ScrollBar.Border.Dark}"
                                  ParentElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  RenderHover="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollBar}}}"
                                  VisualStateManager.CustomVisualStateManager="{x:Static aero:SystemVisualStateManager.Instance}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Normal" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Normal" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Normal" To="Hover" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="MouseOver" To="Normal" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="MouseOver" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="MouseOver" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="MouseOver" To="Hover" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="Pressed" To="Normal" GeneratedDuration="0:00:00.225"/>
                  <!-- aero.msstyles defines a duration for this transition but
                       it is not actually used when releasing the mouse button -->
                  <!--<VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:00:00.225"/>-->
                  <VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Pressed" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Pressed" To="Hover" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Disabled" To="Normal" GeneratedDuration="0:00:00.375"/>
                  <VisualTransition From="Disabled" To="MouseOver" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Pressed" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Hover" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Hover" To="Normal" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="Hover" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Hover" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Hover" To="Disabled" GeneratedDuration="0:00:00"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Background.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Glyph.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Background.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Glyph.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Background.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Glyph.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Hover">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Background.Hover.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Glyph.Hover.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- Up glyph is moved 1px down. -->
            <Path x:Name="Glyph"
                  Data="M0,3.5 0,6.5 3.5,3 7,6.5 7,3.5 3.5,0 z"
                  Stretch="Uniform"
                  Margin="3,4,3,2"
                  Fill="{StaticResource ScrollBar.ArrowButton.Glyph.Normal}"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                  SnapsToDevicePixels="True"
                  RenderOptions.EdgeMode="Aliased"
                  UseLayoutRounding="False"
                  Width="7"
                  Height="7"
                  Focusable="False"/>
          </aero10:ScrollBarChrome>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ScrollBarButtonDown" TargetType="{x:Type RepeatButton}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="IsTabStop" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <aero10:ScrollBarChrome x:Name="Border"
                                  SnapsToDevicePixels="True"
                                  Orientation="Vertical"
                                  Background="{StaticResource ScrollBar.ArrowButton.Background.Normal}"
                                  LightBorderBrush="{StaticResource ScrollBar.Border.Light}"
                                  DarkBorderBrush="{StaticResource ScrollBar.Border.Dark}"
                                  ParentElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  RenderHover="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollBar}}}"
                                  VisualStateManager.CustomVisualStateManager="{x:Static aero:SystemVisualStateManager.Instance}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Normal" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Normal" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Normal" To="Hover" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="MouseOver" To="Normal" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="MouseOver" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="MouseOver" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="MouseOver" To="Hover" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="Pressed" To="Normal" GeneratedDuration="0:00:00.225"/>
                  <!-- aero.msstyles defines a duration for this transition but
                       it is not actually used when releasing the mouse button -->
                  <!--<VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:00:00.225"/>-->
                  <VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Pressed" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Pressed" To="Hover" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Disabled" To="Normal" GeneratedDuration="0:00:00.375"/>
                  <VisualTransition From="Disabled" To="MouseOver" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Pressed" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Hover" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Hover" To="Normal" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="Hover" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Hover" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Hover" To="Disabled" GeneratedDuration="0:00:00"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Background.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Glyph.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Background.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Glyph.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Background.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Glyph.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Hover">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Background.Hover.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Glyph.Hover.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Path x:Name="Glyph"
                  Data="M0,3 0,0 3.5,3.5 7,0 7,3 3.5,6.5 z"
                  Stretch="Uniform"
                  Margin="3"
                  Fill="{StaticResource ScrollBar.ArrowButton.Glyph.Normal}"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                  SnapsToDevicePixels="True"
                  RenderOptions.EdgeMode="Aliased"
                  UseLayoutRounding="False"
                  Width="7"
                  Height="7"
                  Focusable="False"/>
          </aero10:ScrollBarChrome>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ScrollBarButtonLeft" TargetType="{x:Type RepeatButton}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="IsTabStop" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <aero10:ScrollBarChrome x:Name="Border"
                                  SnapsToDevicePixels="True"
                                  Orientation="Horizontal"
                                  Background="{StaticResource ScrollBar.ArrowButton.Background.Normal}"
                                  LightBorderBrush="{StaticResource ScrollBar.Border.Light}"
                                  DarkBorderBrush="{StaticResource ScrollBar.Border.Dark}"
                                  ParentElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  RenderHover="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollBar}}}"
                                  VisualStateManager.CustomVisualStateManager="{x:Static aero:SystemVisualStateManager.Instance}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Normal" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Normal" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Normal" To="Hover" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="MouseOver" To="Normal" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="MouseOver" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="MouseOver" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="MouseOver" To="Hover" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="Pressed" To="Normal" GeneratedDuration="0:00:00.225"/>
                  <!-- aero.msstyles defines a duration for this transition but
                       it is not actually used when releasing the mouse button -->
                  <!--<VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:00:00.225"/>-->
                  <VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Pressed" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Pressed" To="Hover" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Disabled" To="Normal" GeneratedDuration="0:00:00.375"/>
                  <VisualTransition From="Disabled" To="MouseOver" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Pressed" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Hover" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Hover" To="Normal" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="Hover" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Hover" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Hover" To="Disabled" GeneratedDuration="0:00:00"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Background.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Glyph.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Background.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Glyph.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Background.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Glyph.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Hover">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Background.Hover.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Glyph.Hover.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Path x:Name="Glyph"
                  Data="M0,3.5 3.5,0 6.5,0 3,3.5 6.5,7 3.5,7 z"
                  Stretch="Uniform"
                  Margin="3"
                  Fill="{StaticResource ScrollBar.ArrowButton.Glyph.Normal}"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                  SnapsToDevicePixels="True"
                  RenderOptions.EdgeMode="Aliased"
                  UseLayoutRounding="False"
                  Width="7"
                  Height="7"/>
          </aero10:ScrollBarChrome>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ScrollBarButtonRight" TargetType="{x:Type RepeatButton}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="IsTabStop" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <aero10:ScrollBarChrome x:Name="Border"
                                  SnapsToDevicePixels="True"
                                  Orientation="Horizontal"
                                  Background="{StaticResource ScrollBar.ArrowButton.Background.Normal}"
                                  LightBorderBrush="{StaticResource ScrollBar.Border.Light}"
                                  DarkBorderBrush="{StaticResource ScrollBar.Border.Dark}"
                                  ParentElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  RenderHover="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollBar}}}"
                                  VisualStateManager.CustomVisualStateManager="{x:Static aero:SystemVisualStateManager.Instance}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Normal" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Normal" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Normal" To="Hover" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="MouseOver" To="Normal" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="MouseOver" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="MouseOver" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="MouseOver" To="Hover" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="Pressed" To="Normal" GeneratedDuration="0:00:00.225"/>
                  <!-- aero.msstyles defines a duration for this transition but
                       it is not actually used when releasing the mouse button -->
                  <!--<VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:00:00.225"/>-->
                  <VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Pressed" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Pressed" To="Hover" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Disabled" To="Normal" GeneratedDuration="0:00:00.375"/>
                  <VisualTransition From="Disabled" To="MouseOver" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Pressed" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Hover" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Hover" To="Normal" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="Hover" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Hover" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Hover" To="Disabled" GeneratedDuration="0:00:00"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Background.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Glyph.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Background.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Glyph.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Background.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Glyph.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Hover">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Background.Hover.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Glyph.Hover.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Path x:Name="Glyph"
                  Data="M3,7 0,7 3.5,3.5 0,0 3,0 6.5,3.5 z"
                  Stretch="Uniform"
                  Margin="3"
                  Fill="{StaticResource ScrollBar.ArrowButton.Glyph.Normal}"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                  SnapsToDevicePixels="True"
                  RenderOptions.EdgeMode="Aliased"
                  UseLayoutRounding="False"
                  Width="7"
                  Height="7"/>
          </aero10:ScrollBarChrome>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ScrollBarThumbVertical" TargetType="{x:Type Thumb}">
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Setter Property="IsTabStop" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <aero10:ScrollBarChrome x:Name="Border"
                                  Orientation="Vertical"
                                  Background="{StaticResource ScrollBar.Thumb.Background.Normal}"
                                  LightBorderBrush="{StaticResource ScrollBar.Border.Light}"
                                  DarkBorderBrush="{StaticResource ScrollBar.Border.Dark}"
                                  SnapsToDevicePixels="True"
                                  Width="{TemplateBinding Width}"
                                  Height="{TemplateBinding Height}"
                                  ParentElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  RenderHover="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollBar}}}"
                                  VisualStateManager.CustomVisualStateManager="{x:Static aero:SystemVisualStateManager.Instance}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Normal" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Normal" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Normal" To="Hover" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="MouseOver" To="Normal" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="MouseOver" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="MouseOver" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="MouseOver" To="Hover" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="Pressed" To="Normal" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Pressed" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Pressed" To="Hover" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Disabled" To="Normal" GeneratedDuration="0:00:00.375"/>
                  <VisualTransition From="Disabled" To="MouseOver" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Pressed" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Hover" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Hover" To="Normal" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="Hover" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Hover" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Hover" To="Disabled" GeneratedDuration="0:00:00"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Thumb.Background.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Thumb.Background.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Thumb.Background.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Hover">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Thumb.Background.Hover.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </aero10:ScrollBarChrome>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ScrollBarThumbHorizontal" TargetType="{x:Type Thumb}">
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Setter Property="IsTabStop" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <aero10:ScrollBarChrome x:Name="Border"
                                  Orientation="Horizontal"
                                  Background="{StaticResource ScrollBar.Thumb.Background.Normal}"
                                  LightBorderBrush="{StaticResource ScrollBar.Border.Light}"
                                  DarkBorderBrush="{StaticResource ScrollBar.Border.Dark}"
                                  SnapsToDevicePixels="True"
                                  Width="{TemplateBinding Width}"
                                  Height="{TemplateBinding Height}"
                                  ParentElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  RenderHover="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollBar}}}"
                                  VisualStateManager.CustomVisualStateManager="{x:Static aero:SystemVisualStateManager.Instance}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Normal" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Normal" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Normal" To="Hover" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="MouseOver" To="Normal" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="MouseOver" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="MouseOver" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="MouseOver" To="Hover" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="Pressed" To="Normal" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Pressed" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Pressed" To="Hover" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Disabled" To="Normal" GeneratedDuration="0:00:00.375"/>
                  <VisualTransition From="Disabled" To="MouseOver" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Pressed" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Hover" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Hover" To="Normal" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="Hover" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Hover" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Hover" To="Disabled" GeneratedDuration="0:00:00"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Thumb.Background.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Thumb.Background.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Thumb.Background.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Hover">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Thumb.Background.Hover.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </aero10:ScrollBarChrome>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type ScrollBar}">
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Background" Value="{StaticResource ScrollBar.Background}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ScrollBar.Border.Dark}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="BorderThickness" Value="1,0"/>
    <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
    <Setter Property="MinWidth"
            Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollBar}">
          <Grid SnapsToDevicePixels="True">
            <Grid.RowDefinitions>
              <RowDefinition
                MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
              <RowDefinition Height="0.00001*"/>
              <RowDefinition
                MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
            </Grid.RowDefinitions>
            <aero10:ScrollBarChrome Grid.Row="1"
                                    SnapsToDevicePixels="True"
                                    Background="{StaticResource ScrollBar.Background}"
                                    LightBorderBrush="{StaticResource ScrollBar.Border.Light}"
                                    DarkBorderBrush="{StaticResource ScrollBar.Border.Dark}"/>
            <RepeatButton x:Name="PART_LineUpButton"
                          Command="{x:Static ScrollBar.LineUpCommand}"
                          Style="{StaticResource ScrollBarButtonUp}"/>
            <Track x:Name="PART_Track"
                   Grid.Row="1"
                   IsDirectionReversed="True">
              <Track.DecreaseRepeatButton>
                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}"
                              Style="{StaticResource RepeatButtonTransparent}"/>
              </Track.DecreaseRepeatButton>
              <Track.IncreaseRepeatButton>
                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}"
                              Style="{StaticResource RepeatButtonTransparent}"/>
              </Track.IncreaseRepeatButton>
              <Track.Thumb>
                <Thumb Style="{StaticResource ScrollBarThumbVertical}"/>
              </Track.Thumb>
            </Track>
            <RepeatButton x:Name="PART_LineDownButton"
                          Grid.Row="2"
                          Command="{x:Static ScrollBar.LineDownCommand}"
                          Style="{StaticResource ScrollBarButtonDown}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Horizontal">
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Height"
                Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
        <Setter Property="MinHeight"
                Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
        <Setter Property="BorderThickness" Value="0,1"/>
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ScrollBar}">
              <Grid SnapsToDevicePixels="True">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition
                    MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                  <ColumnDefinition Width="0.00001*"/>
                  <ColumnDefinition
                    MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                </Grid.ColumnDefinitions>
                <aero10:ScrollBarChrome Grid.Column="1"
                                        Orientation="Horizontal"
                                        SnapsToDevicePixels="True"
                                        Background="{StaticResource ScrollBar.Background}"
                                        LightBorderBrush="{StaticResource ScrollBar.Border.Light}"
                                        DarkBorderBrush="{StaticResource ScrollBar.Border.Dark}"/>
                <RepeatButton x:Name="PART_LineLeftButton"
                              Command="{x:Static ScrollBar.LineLeftCommand}"
                              Style="{StaticResource ScrollBarButtonLeft}"/>
                <Track x:Name="PART_Track" Grid.Column="1">
                  <Track.DecreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}"
                                  Style="{StaticResource RepeatButtonTransparent}"/>
                  </Track.DecreaseRepeatButton>
                  <Track.IncreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}"
                                  Style="{StaticResource RepeatButtonTransparent}"/>
                  </Track.IncreaseRepeatButton>
                  <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumbHorizontal}"/>
                  </Track.Thumb>
                </Track>
                <RepeatButton x:Name="PART_LineRightButton"
                              Grid.Column="2"
                              Command="{x:Static ScrollBar.LineRightCommand}"
                              Style="{StaticResource ScrollBarButtonRight}"/>
              </Grid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>

  <!-- TreeView ============================================================ -->

  <DrawingImage x:Key="TreeView.Glyph.Plus">
    <DrawingImage.Drawing>
      <DrawingGroup>
        <GeometryDrawing Brush="#FFBABBBC" Geometry="M0,0 1,0 1,1 0,1 z  M8,0 9,0 9,1 8,1 z  M8,8 9,8 9,9 8,9 z  M0,8 1,8 1,9 0,9 z"/>
        <GeometryDrawing Brush="#FF919191" Geometry="M1,0 8,0 8,1 1,1 z  M9,1 9,8 8,8 8,1 z  M8,9 1,9 1,8 8,8 z  M0,8 0,1 1,1 1,8 z"/>
        <GeometryDrawing Brush="#FFFAFBFB" Geometry="M1,1 8,1 8,5 1,5 z"/>
        <GeometryDrawing Brush="#FFEDEDEC" Geometry="M1,5 8,5 8,6 1,6 z"/>
        <GeometryDrawing Brush="#FFE3E3E3" Geometry="M1,6 8,6 8,8 1,8 z"/>
        <GeometryDrawing Brush="#FF294272" Geometry="M4,2 5,2 5,7 4,7 z"/>
        <GeometryDrawing Brush="#FF4B63A7" Geometry="M2,4 7,4 7,5 2,5 z"/>
      </DrawingGroup>
    </DrawingImage.Drawing>
  </DrawingImage>

  <DrawingImage x:Key="TreeView.Glyph.Minus">
    <DrawingImage.Drawing>
      <DrawingGroup>
        <GeometryDrawing Brush="#FFBABBBC" Geometry="M0,0 1,0 1,1 0,1 z  M8,0 9,0 9,1 8,1 z  M8,8 9,8 9,9 8,9 z  M0,8 1,8 1,9 0,9 z"/>
        <GeometryDrawing Brush="#FF919191" Geometry="M1,0 8,0 8,1 1,1 z  M9,1 9,8 8,8 8,1 z  M8,9 1,9 1,8 8,8 z  M0,8 0,1 1,1 1,8 z"/>
        <GeometryDrawing Brush="#FFFAFBFB" Geometry="M1,1 8,1 8,4 1,4 z"/>
        <GeometryDrawing Brush="#FFEDEDEC" Geometry="M1,4 8,4 8,6 1,6 z"/>
        <GeometryDrawing Brush="#FFE3E3E3" Geometry="M1,6 8,6 8,8 1,8 z"/>
        <GeometryDrawing Brush="#FF4B63A7" Geometry="M2,4 7,4 7,5 2,5 z"/>
      </DrawingGroup>
    </DrawingImage.Drawing>
  </DrawingImage>

  <Style x:Key="TreeViewItem.ExpanderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Width" Value="19"/>
    <Setter Property="VerticalAlignment" Value="Stretch"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Background="Transparent">
            <Image x:Name="Glyph" Source="{StaticResource TreeView.Glyph.Plus}"
                   Width="9" Height="9" Margin="5,4,5,3"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Glyph" Property="Source" Value="{StaticResource TreeView.Glyph.Minus}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ControlTemplate x:Key="TreeViewItem.Template.Default" TargetType="{x:Type TreeViewItem}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" MinWidth="19"/>
        <ColumnDefinition Width="*"/>
      </Grid.ColumnDefinitions>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition/>
      </Grid.RowDefinitions>
      <ToggleButton x:Name="Expander"
                    Style="{StaticResource TreeViewItem.ExpanderStyle}"
                    Margin="3,0,0,0"
                    IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                    ClickMode="Press"/>
      <Border x:Name="Bd"
              Grid.Column="1"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Padding="{TemplateBinding Padding}"
              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
              SnapsToDevicePixels="True">
        <ContentPresenter x:Name="PART_Header"
                          ContentSource="Header"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
      </Border>
      <ItemsPresenter x:Name="ItemsHost"
                      Margin="19,0,0,0"
                      Grid.Row="1"
                      Grid.ColumnSpan="2"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsExpanded" Value="False">
        <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="HasItems" Value="False">
        <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
      </Trigger>
      <Trigger Property="IsSelected" Value="True">
        <Setter TargetName="Bd" Property="Background"
                Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelected" Value="True"/>
          <Condition Property="IsSelectionActive" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Bd" Property="Background"
                Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="TreeViewItem.Template.FullRowSelect" TargetType="{x:Type TreeViewItem}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition/>
      </Grid.RowDefinitions>
      <Border x:Name="Bd"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              SnapsToDevicePixels="True">
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="1e300">
              <ColumnDefinition.MaxWidth>
                <Binding RelativeSource="{RelativeSource TemplatedParent}"
                         Converter="{StaticResource TreeViewItemLevelConverter}">
                  <Binding.ConverterParameter>
                    <system:Int32>19</system:Int32>
                  </Binding.ConverterParameter>
                </Binding>
              </ColumnDefinition.MaxWidth>
            </ColumnDefinition>
            <ColumnDefinition Width="Auto" MinWidth="19"/>
            <ColumnDefinition Width="*"/>
          </Grid.ColumnDefinitions>
          <ToggleButton x:Name="Expander" Grid.Column="1"
                        Style="{StaticResource TreeViewItem.ExpanderStyle}"
                        Margin="3,0,0,0"
                        IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                        ClickMode="Press"/>
          <ContentPresenter x:Name="PART_Header"
                            Grid.Column="2"
                            ContentSource="Header"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        </Grid>
      </Border>
      <ItemsPresenter x:Name="ItemsHost" Grid.Row="1"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsExpanded" Value="False">
        <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="HasItems" Value="False">
        <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
      </Trigger>
      <Trigger Property="IsSelected" Value="True">
        <Setter TargetName="Bd" Property="Background"
                Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelected" Value="True"/>
          <Condition Property="IsSelectionActive" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Bd" Property="Background"
                Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Geometry x:Key="Explorer.TreeView.Glyph.Plus">
    F1 M4.88,5.12 6.119,3.881 10.119,7.881 10.737,8.5 6.119,13.119 4.881,11.881 8.881,7.881 9.5,8.5 8.881,9.119 4.881,5.119 z
  </Geometry>

  <Geometry x:Key="Explorer.TreeView.Glyph.Minus">
    F1 M2.88,6.12 4.119,4.881 8.119,8.881 7.5,9.5 6.881,8.881 10.881,4.881 12.119,6.119 7.5,10.737 6.881,10.119 2.881,6.119 z
  </Geometry>

  <Style x:Key="Explorer.TreeViewItem.ExpanderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="VerticalAlignment" Value="Stretch"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border x:Name="Bd" Background="Transparent">
            <Path x:Name="Glyph" Data="{StaticResource Explorer.TreeView.Glyph.Plus}"
                  Width="16" Height="16" Stretch="None" Fill="#59000000" Margin="1,0,0,0"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Glyph" Property="Data" Value="{StaticResource Explorer.TreeView.Glyph.Minus}"/>
              <Setter TargetName="Glyph" Property="Fill" Value="#BF000000"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Glyph" Property="Fill" Value="#BF1CC4F7"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="True"/>
                <Condition Property="IsMouseOver" Value="True"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Glyph" Property="Fill" Value="#FF1CC4F7"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ControlTemplate x:Key="Explorer.TreeViewItem.Template.Default" TargetType="{x:Type TreeViewItem}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" MinWidth="19"/>
        <ColumnDefinition Width="*"/>
      </Grid.ColumnDefinitions>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition/>
      </Grid.RowDefinitions>
      <ToggleButton x:Name="Expander"
                    Style="{StaticResource Explorer.TreeViewItem.ExpanderStyle}"
                    Margin="3,0,0,0"
                    IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                    ClickMode="Press"/>
      <Border x:Name="Bd"
              Grid.Column="1"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
              SnapsToDevicePixels="True">
        <Border x:Name="InnerBd"
                Padding="{TemplateBinding Padding}">
          <ContentPresenter x:Name="PART_Header"
                            ContentSource="Header"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        </Border>
      </Border>
      <ItemsPresenter x:Name="ItemsHost"
                      Margin="19,0,0,0"
                      Grid.Row="1"
                      Grid.ColumnSpan="2"/>
    </Grid>
    <ControlTemplate.Triggers>
      <DataTrigger Value="True">
        <DataTrigger.Binding>
          <MultiBinding Converter="{StaticResource EqualsConverter}">
            <Binding Path="ActualHeight" ElementName="InnerBd"/>
            <Binding>
              <Binding.Source>
                <system:Double>17</system:Double>
              </Binding.Source>
            </Binding>
          </MultiBinding>
        </DataTrigger.Binding>
        <Setter TargetName="InnerBd" Property="Margin" Value="0,-1,0,0"/>
      </DataTrigger>
      <Trigger Property="IsExpanded" Value="False">
        <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="HasItems" Value="False">
        <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="Bd" Property="IsMouseOver" Value="True"/>
          <Condition Property="IsSelected" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Bd" Property="Background" Value="{StaticResource Explorer.ListView.Item.Background.HotSelected}"/>
        <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Explorer.ListView.Item.Border.HotSelected}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="Bd" Property="IsMouseOver" Value="True"/>
          <Condition Property="IsSelected" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Bd" Property="Background" Value="{StaticResource Explorer.ListView.Item.Background.Hot}"/>
        <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Explorer.ListView.Item.Border.Hot}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="Bd" Property="IsMouseOver" Value="False"/>
          <Condition Property="IsSelected" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Bd" Property="Background" Value="{StaticResource Explorer.ListView.Item.Background.Selected}"/>
        <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Explorer.ListView.Item.Border.Selected}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelected" Value="True"/>
          <Condition Property="IsSelectionActive" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Bd" Property="Background" Value="{StaticResource Explorer.ListView.Item.Background.SelectedNotFocus}"/>
        <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Explorer.ListView.Item.Border.SelectedNotFocus}"/>
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="Explorer.TreeViewItem.Template.FullRowSelect" TargetType="{x:Type TreeViewItem}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition/>
      </Grid.RowDefinitions>
      <Border x:Name="Bd"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              SnapsToDevicePixels="True">
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="1e300">
              <ColumnDefinition.MaxWidth>
                <Binding RelativeSource="{RelativeSource TemplatedParent}"
                         Converter="{StaticResource TreeViewItemLevelConverter}">
                  <Binding.ConverterParameter>
                    <system:Int32>19</system:Int32>
                  </Binding.ConverterParameter>
                </Binding>
              </ColumnDefinition.MaxWidth>
            </ColumnDefinition>
            <ColumnDefinition Width="Auto" MinWidth="19"/>
            <ColumnDefinition Width="*"/>
          </Grid.ColumnDefinitions>
          <ToggleButton x:Name="Expander" Grid.Column="1"
                        Style="{StaticResource Explorer.TreeViewItem.ExpanderStyle}"
                        Margin="2,-1,1,-1"
                        IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                        ClickMode="Press"/>
          <Border x:Name="InnerBd" Grid.Column="2"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
            <ContentPresenter x:Name="PART_Header"
                              ContentSource="Header"
                              Margin="{TemplateBinding Padding}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
          </Border>
        </Grid>
      </Border>
      <ItemsPresenter x:Name="ItemsHost" Grid.Row="1"/>
    </Grid>
    <ControlTemplate.Triggers>
      <DataTrigger Value="True">
        <DataTrigger.Binding>
          <MultiBinding Converter="{StaticResource EqualsConverter}">
            <Binding Path="ActualHeight" ElementName="InnerBd"/>
            <Binding>
              <Binding.Source>
                <system:Double>17</system:Double>
              </Binding.Source>
            </Binding>
          </MultiBinding>
        </DataTrigger.Binding>
        <Setter TargetName="InnerBd" Property="Margin" Value="0,-1,0,0"/>
      </DataTrigger>
      <Trigger Property="IsExpanded" Value="False">
        <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="HasItems" Value="False">
        <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="Bd" Property="IsMouseOver" Value="True"/>
          <Condition Property="IsSelected" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Bd" Property="Background" Value="{StaticResource Explorer.ListView.Item.Background.HotSelected}"/>
        <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Explorer.ListView.Item.Border.HotSelected}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="Bd" Property="IsMouseOver" Value="True"/>
          <Condition Property="IsSelected" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Bd" Property="Background" Value="{StaticResource Explorer.ListView.Item.Background.Hot}"/>
        <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Explorer.ListView.Item.Border.Hot}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="Bd" Property="IsMouseOver" Value="False"/>
          <Condition Property="IsSelected" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Bd" Property="Background" Value="{StaticResource Explorer.ListView.Item.Background.Selected}"/>
        <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Explorer.ListView.Item.Border.Selected}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelected" Value="True"/>
          <Condition Property="IsSelectionActive" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Bd" Property="Background" Value="{StaticResource Explorer.ListView.Item.Background.SelectedNotFocus}"/>
        <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Explorer.ListView.Item.Border.SelectedNotFocus}"/>
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="Explorer.TreeView.Template" TargetType="{x:Type TreeView}">
    <Border x:Name="Border"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            Padding="{TemplateBinding Padding}"
            SnapsToDevicePixels="True">
      <Grid>
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto"/>
          <RowDefinition/>
        </Grid.RowDefinitions>
        <ScrollViewer x:Name="ScrollViewer"
                      Grid.Row="1"
                      Background="{TemplateBinding Background}"
                      Focusable="False"
                      CanContentScroll="False"
                      HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                      VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
          <ItemsPresenter/>
        </ScrollViewer>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Border" Property="Background"
                Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
      </Trigger>
      <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
        <Setter TargetName="ScrollViewer" Property="CanContentScroll"
                Value="True"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style TargetType="{x:Type TreeView}">
    <Setter Property="Background" Value="{StaticResource ListBox.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ListBox.Border.Normal}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Padding" Value="1"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Once"/>
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeView}">
          <Border x:Name="Border"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Padding="{TemplateBinding Padding}"
                  SnapsToDevicePixels="True">
            <ScrollViewer x:Name="ScrollViewer"
                          CanContentScroll="False"
                          HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                          VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
              <ItemsPresenter/>
            </ScrollViewer>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Border" Property="Background"
                      Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
            </Trigger>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
              <Setter TargetName="ScrollViewer" Property="CanContentScroll"
                      Value="True"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
        <Setter Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <VirtualizingStackPanel/>
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="aero:ThemeOptions.UseExplorerStyle" Value="True">
        <Setter Property="Template" Value="{StaticResource Explorer.TreeView.Template}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="{x:Type TreeViewItem}">
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="HorizontalContentAlignment"
            Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="VerticalContentAlignment"
            Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Padding" Value="2,1,2,2"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
    <Setter Property="Template" Value="{StaticResource TreeViewItem.Template.Default}"/>
    <Style.Triggers>
      <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
        <Setter Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <VirtualizingStackPanel/>
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="aero:TreeViewService.FullRowSelect" Value="True">
        <Setter Property="Template" Value="{StaticResource TreeViewItem.Template.FullRowSelect}"/>
      </Trigger>
      <Trigger Property="aero:ThemeOptions.UseExplorerStyle" Value="True">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="3,1,3,1"/>
        <Setter Property="Template" Value="{StaticResource Explorer.TreeViewItem.Template.Default}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="aero:TreeViewService.FullRowSelect" Value="True"/>
          <Condition Property="aero:ThemeOptions.UseExplorerStyle" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter Property="Template" Value="{StaticResource Explorer.TreeViewItem.Template.FullRowSelect}"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>


  <!-- TabControl ========================================================== -->

  <SolidColorBrush x:Key="TabItem.Background.Normal" Color="#FFF0F0F0" po:Freeze="True"/>
  <SolidColorBrush x:Key="TabItem.Background.Hot" Color="#FFD8EAF9" po:Freeze="True"/>
  <SolidColorBrush x:Key="TabItem.Background.Selected" Color="#FFFFFFFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="TabItem.Background.Disabled" Color="#FFECECEC" po:Freeze="True"/>
  <SolidColorBrush x:Key="TabItem.Border.Normal" Color="#FFD9D9D9" po:Freeze="True"/>
  <SolidColorBrush x:Key="TabItem.Border.Hot" Color="#FFD9D9D9" po:Freeze="True"/>
  <SolidColorBrush x:Key="TabItem.Border.Selected" Color="#FFD9D9D9" po:Freeze="True"/>
  <SolidColorBrush x:Key="TabItem.Border.Disabled" Color="#FFD9D9D9" po:Freeze="True"/>

  <Style TargetType="{x:Type TabControl}">
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Background" Value="{StaticResource TabItem.Background.Selected}"/>
    <Setter Property="BorderBrush" Value="{StaticResource TabItem.Border.Selected}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Padding" Value="6,4,6,6"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabControl}">
          <Grid x:Name="TemplateRoot"
                        ClipToBounds="True"
                        SnapsToDevicePixels="True"
                        KeyboardNavigation.TabNavigation="Local">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="ColumnDefinition0"/>
              <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
              <RowDefinition x:Name="RowDefinition1" Height="*"/>
            </Grid.RowDefinitions>
            <aero10:RoundingTabPanel x:Name="HeaderPanel"
                                     SelectedTab="{TemplateBinding SelectedItem}"
                                     Background="Transparent"
                                     IsItemsHost="True"
                                     Margin="2,2,2,0"
                                     KeyboardNavigation.TabIndex="1"
                                     Panel.ZIndex="1"/>
            <Border x:Name="ContentPanel"
                    Grid.Row="1"
                    KeyboardNavigation.DirectionalNavigation="Contained"
                    KeyboardNavigation.TabNavigation="Local"
                    KeyboardNavigation.TabIndex="2"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}">
              <ContentPresenter x:Name="PART_SelectedContentHost"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                Margin="{TemplateBinding Padding}"
                                ContentSource="SelectedContent"/>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="TabStripPlacement" Value="Bottom">
              <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="1"/>
              <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="RowDefinition0" Property="Height" Value="*"/>
              <Setter TargetName="RowDefinition1" Property="Height" Value="Auto"/>
              <Setter TargetName="HeaderPanel" Property="Margin" Value="2,0,2,2"/>
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Left">
              <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="0"/>
              <Setter TargetName="ContentPanel" Property="Grid.Column" Value="1"/>
              <Setter TargetName="ColumnDefinition0" Property="Width" Value="Auto"/>
              <Setter TargetName="ColumnDefinition1" Property="Width" Value="*"/>
              <Setter TargetName="RowDefinition0" Property="Height" Value="*"/>
              <Setter TargetName="RowDefinition1" Property="Height" Value="0"/>
              <Setter TargetName="HeaderPanel" Property="Margin" Value="2,2,0,2"/>
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Right">
              <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="1"/>
              <Setter TargetName="ContentPanel" Property="Grid.Column" Value="0"/>
              <Setter TargetName="ColumnDefinition0" Property="Width" Value="*"/>
              <Setter TargetName="ColumnDefinition1" Property="Width" Value="Auto"/>
              <Setter TargetName="RowDefinition0" Property="Height" Value="*"/>
              <Setter TargetName="RowDefinition1" Property="Height" Value="0"/>
              <Setter TargetName="HeaderPanel" Property="Margin" Value="0,2,2,2"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="TemplateRoot" Property="TextElement.Foreground"
                      Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="TabItem.FocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="3,3,3,2"
                     SnapsToDevicePixels="True"
                     Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                     StrokeThickness="1"
                     StrokeDashArray="1 1"
                     StrokeDashOffset="0.5"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type TabItem}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource TabItem.FocusVisual}"/>
    <Setter Property="Foreground" Value="Black"/>
    <Setter Property="Background" Value="{StaticResource TabItem.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource TabItem.Border.Normal}"/>
    <Setter Property="Margin" Value="0"/>
    <Setter Property="Padding" Value="5,2"/>
    <Setter Property="MinWidth" Value="48"/>
    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="VerticalContentAlignment" Value="Stretch"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
          <Border x:Name="Border"
                  BorderThickness="1,1,1,0"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}">
            <Border Padding="{TemplateBinding Padding}">
              <ContentPresenter x:Name="Content"
                                ContentSource="Header"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                Focusable="False"
                                RecognizesAccessKey="True"/>
            </Border>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItem.Background.Hot}"/>
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItem.Border.Hot}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Content" Property="Opacity" Value="0.56"/>
              <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItem.Background.Disabled}"/>
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItem.Border.Disabled}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
              <Setter Property="Panel.ZIndex" Value="1"/>
              <Setter Property="Margin" Value="-2,-2,-2,-1"/>
              <Setter Property="Padding" Value="7,0,3,4"/>
              <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItem.Background.Selected}"/>
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItem.Border.Selected}"/>
            </Trigger>
            <Trigger Property="aero10:RoundingTabPanel.TabItemKind" Value="Leading">
              <Setter TargetName="Border" Property="BorderThickness" Value="1,1,0,0"/>
              <Setter Property="Padding" Value="5,2,6,2"/>
            </Trigger>
            <Trigger Property="aero10:RoundingTabPanel.TabItemKind" Value="Trailing">
              <Setter TargetName="Border" Property="BorderThickness" Value="0,1,1,0"/>
              <Setter Property="Padding" Value="6,2,5,2"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="TabStripPlacement" Value="Bottom">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type TabItem}">
              <Border x:Name="Border"
                  BorderThickness="1,0,1,1"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}">
                <Border Padding="{TemplateBinding Padding}">
                  <ContentPresenter x:Name="Content"
                                ContentSource="Header"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                Focusable="False"
                                RecognizesAccessKey="True"/>
                </Border>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                  <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItem.Background.Hot}"/>
                  <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItem.Border.Hot}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                  <Setter TargetName="Content" Property="Opacity" Value="0.56"/>
                  <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItem.Background.Disabled}"/>
                  <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItem.Border.Disabled}"/>
                </Trigger>
                <Trigger Property="IsSelected" Value="True">
                  <Setter Property="Panel.ZIndex" Value="1"/>
                  <Setter Property="Margin" Value="-2,-1,-2,-2"/>
                  <Setter Property="Padding" Value="7,3,3,1"/>
                  <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItem.Background.Selected}"/>
                  <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItem.Border.Selected}"/>
                </Trigger>
                <Trigger Property="aero10:RoundingTabPanel.TabItemKind" Value="Leading">
                  <Setter TargetName="Border" Property="BorderThickness" Value="1,0,0,1"/>
                  <Setter Property="Padding" Value="5,2,6,2"/>
                </Trigger>
                <Trigger Property="aero10:RoundingTabPanel.TabItemKind" Value="Trailing">
                  <Setter TargetName="Border" Property="BorderThickness" Value="0,0,1,1"/>
                  <Setter Property="Padding" Value="6,2,5,2"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="TabStripPlacement" Value="Left">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type TabItem}">
              <Border x:Name="Border"
                  BorderThickness="1,1,1,0"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}">
                <Border Padding="{TemplateBinding Padding}">
                  <ContentPresenter x:Name="Content"
                                ContentSource="Header"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Center"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                Focusable="False"
                                RecognizesAccessKey="True"/>
                </Border>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                  <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItem.Background.Hot}"/>
                  <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItem.Border.Hot}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                  <Setter TargetName="Content" Property="Opacity" Value="0.56"/>
                  <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItem.Background.Disabled}"/>
                  <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItem.Border.Disabled}"/>
                </Trigger>
                <Trigger Property="IsSelected" Value="True">
                  <Setter Property="Panel.ZIndex" Value="1"/>
                  <Setter Property="Margin" Value="-2,-2,-2,-1"/>
                  <Setter Property="Padding" Value="3,0,7,4"/>
                  <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItem.Background.Selected}"/>
                  <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItem.Border.Selected}"/>
                </Trigger>
                <Trigger Property="aero10:RoundingTabPanel.TabItemKind" Value="Leading">
                  <Setter TargetName="Border" Property="BorderThickness" Value="0,1,1,0"/>
                  <Setter Property="Padding" Value="6,2,5,2"/>
                </Trigger>
                <Trigger Property="aero10:RoundingTabPanel.TabItemKind" Value="Trailing">
                  <Setter TargetName="Border" Property="BorderThickness" Value="1,1,0,0"/>
                  <Setter Property="Padding" Value="5,2,6,2"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Setter Property="LayoutTransform">
          <Setter.Value>
            <RotateTransform Angle="-90"/>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="TabStripPlacement" Value="Right">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type TabItem}">
              <Border x:Name="Border"
                      BorderThickness="1,1,1,0"
                      Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}">
                <ContentPresenter x:Name="Content"
                                  ContentSource="Header"
                                  HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                  VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  Focusable="False"
                                  Margin="{TemplateBinding Padding}"
                                  RecognizesAccessKey="True"/>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                  <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItem.Background.Hot}"/>
                  <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItem.Border.Hot}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                  <Setter TargetName="Content" Property="Opacity" Value="0.56"/>
                  <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItem.Background.Disabled}"/>
                  <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItem.Border.Disabled}"/>
                </Trigger>
                <Trigger Property="IsSelected" Value="True">
                  <Setter Property="Panel.ZIndex" Value="1"/>
                  <Setter Property="Margin" Value="-2,-2,-2,-1"/>
                  <Setter Property="Padding" Value="5,0,5,4"/>
                  <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItem.Background.Selected}"/>
                  <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItem.Border.Selected}"/>
                </Trigger>
                <Trigger Property="aero10:RoundingTabPanel.TabItemKind" Value="Leading">
                  <Setter TargetName="Border" Property="BorderThickness" Value="1,1,0,0"/>
                  <Setter Property="Padding" Value="5,2,6,2"/>
                </Trigger>
                <Trigger Property="aero10:RoundingTabPanel.TabItemKind" Value="Trailing">
                  <Setter TargetName="Border" Property="BorderThickness" Value="0,1,1,0"/>
                  <Setter Property="Padding" Value="6,2,5,2"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Setter Property="LayoutTransform">
          <Setter.Value>
            <RotateTransform Angle="90"/>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>


  <!-- ProgressBar ========================================================= -->

  <SolidColorBrush x:Key="ProgressBar.Fill.Background.Normal" Color="#FF06B025" po:Freeze="True"/>
  <SolidColorBrush x:Key="ProgressBar.Background" Color="#FFE6E6E6" po:Freeze="True"/>
  <SolidColorBrush x:Key="ProgressBar.Border" Color="#FFBCBCBC" po:Freeze="True"/>

  <BitmapImage x:Key="ProgressBar.MoveOverlay"
               BaseUri="pack://application:,,,/"
               UriSource="/PresentationTheme.Aero.Win10;component/Resources/Progress.MoveOverlay.png"/>
  <BitmapImage x:Key="ProgressBar.PulseOverlay"
               BaseUri="pack://application:,,,/"
               UriSource="/PresentationTheme.Aero.Win10;component/Resources/Progress.PulseOverlay.png"/>

  <Style TargetType="{x:Type aero10:ProgressBarChrome}">
    <Setter Property="Foreground" Value="{x:Null}"/>
    <Setter Property="Background" Value="{StaticResource ProgressBar.Background}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ProgressBar.Border}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type aero10:ProgressBarChrome}">
          <Grid x:Name="TemplateRoot">
            <Border Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"/>

            <Rectangle x:Name="PART_Track"/>

            <Grid x:Name="PART_Indicator"
                  HorizontalAlignment="Left"
                  ClipToBounds="True"
                  Width="0">
              <Rectangle x:Name="Indicator"
                         Margin="{TemplateBinding BorderThickness}"
                         Fill="{TemplateBinding Foreground}"/>

              <Grid x:Name="PART_MoveOverlay"
                      Width="127"
                      Margin="-127,0,0,0"
                      HorizontalAlignment="Left"
                      VerticalAlignment="Stretch"
                      Visibility="Collapsed">
                <Image x:Name="DeterminateOverlay"
                       Source="{StaticResource ProgressBar.MoveOverlay}"
                       Stretch="Fill"/>
                <Rectangle x:Name="IndeterminateOverlay"
                           Fill="{TemplateBinding Foreground}"
                           Visibility="Collapsed"/>
              </Grid>

              <Grid x:Name="PART_PulseOverlay"
                    Opacity="0"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Bottom"
                    Height="18"
                    Visibility="Collapsed">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto"/>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Image Stretch="Fill">
                  <Image.Source>
                    <CroppedBitmap Source="{StaticResource ProgressBar.PulseOverlay}"
                                   SourceRect="0,0,21,18"/>
                  </Image.Source>
                </Image>
                <Image Stretch="Fill" Grid.Column="1">
                  <Image.Source>
                    <CroppedBitmap Source="{StaticResource ProgressBar.PulseOverlay}"
                                   SourceRect="21,0,1,18"/>
                  </Image.Source>
                </Image>
                <Image Stretch="Fill" Grid.Column="2">
                  <Image.Source>
                    <CroppedBitmap Source="{StaticResource ProgressBar.PulseOverlay}"
                                   SourceRect="22,0,20,18"/>
                  </Image.Source>
                </Image>
              </Grid>
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
              <Setter TargetName="TemplateRoot" Property="LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="Foreground" Value="{x:Null}">
              <Setter TargetName="Indicator" Property="Fill" Value="{StaticResource ProgressBar.Fill.Background.Normal}"/>
              <Setter TargetName="IndeterminateOverlay" Property="Fill" Value="{StaticResource ProgressBar.Fill.Background.Normal}"/>
              <Setter TargetName="PART_MoveOverlay" Property="Visibility" Value="Visible"/>
              <Setter TargetName="PART_PulseOverlay" Property="Visibility" Value="Visible"/>
            </Trigger>
            <DataTrigger Value="True">
              <DataTrigger.Binding>
                <MultiBinding Converter="{StaticResource EqualsConverter}">
                  <Binding Path="Value" RelativeSource="{RelativeSource Self}"/>
                  <Binding Path="Maximum" RelativeSource="{RelativeSource Self}"/>
                </MultiBinding>
              </DataTrigger.Binding>
              <Setter TargetName="PART_MoveOverlay" Property="Visibility" Value="Collapsed"/>
              <Setter TargetName="PART_PulseOverlay" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <Trigger Property="IsIndeterminate" Value="True">
              <Setter TargetName="Indicator" Property="Visibility" Value="Collapsed"/>
              <Setter TargetName="DeterminateOverlay" Property="Visibility" Value="Collapsed"/>
              <Setter TargetName="IndeterminateOverlay" Property="Visibility" Value="Visible"/>
              <Setter TargetName="PART_MoveOverlay" Property="Visibility" Value="Visible"/>
              <Setter TargetName="PART_PulseOverlay" Property="Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type ProgressBar}">
    <Setter Property="Foreground" Value="{x:Null}"/>
    <Setter Property="Background" Value="{StaticResource ProgressBar.Background}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ProgressBar.Border}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ProgressBar}">
          <aero10:ProgressBarChrome
            Style="{StaticResource {x:Type aero10:ProgressBarChrome}}"
            Value="{TemplateBinding Value}"
            Minimum="{TemplateBinding Minimum}"
            Maximum="{TemplateBinding Maximum}"
            Orientation="{TemplateBinding Orientation}"
            IsIndeterminate="{TemplateBinding IsIndeterminate}"
            Foreground="{TemplateBinding Foreground}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <!-- Slider ============================================================== -->

  <SolidColorBrush x:Key="Slider.Thumb.Foreground.Normal" Color="#FFC4C4C4"/>
  <SolidColorBrush x:Key="Slider.Thumb.Background.Normal" Color="#FF0078D7"/>
  <SolidColorBrush x:Key="Slider.Thumb.Background.Hot" Color="#FF171717"/>
  <SolidColorBrush x:Key="Slider.Thumb.Background.Pressed" Color="#FFCCCCCC"/>
  <SolidColorBrush x:Key="Slider.Thumb.Background.Disabled" Color="#FFCCCCCC"/>
  <SolidColorBrush x:Key="Slider.Track.Background" Color="#FFE7EAEA"/>
  <SolidColorBrush x:Key="Slider.Track.Border" Color="#FFD6D6D6"/>

  <ControlTemplate x:Key="SliderThumbHorizontal" TargetType="{x:Type Thumb}">
    <Grid HorizontalAlignment="Center"
          VerticalAlignment="Center"
          UseLayoutRounding="True">
      <Path x:Name="Grip"
            Data="M0,0 10,0 10,21 0,21 z"
            Margin="0,0,1,1"
            SnapsToDevicePixels="True"
            VerticalAlignment="Center"
            UseLayoutRounding="True"
            Stretch="Fill"
            Fill="{StaticResource Slider.Thumb.Background.Normal}"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Hot}"/>
      </Trigger>
      <Trigger Property="IsDragging" Value="True">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Pressed}"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Disabled}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="SliderThumbHorizontalTop" TargetType="{x:Type Thumb}">
    <Grid HorizontalAlignment="Center"
          VerticalAlignment="Center"
          UseLayoutRounding="True">
      <Path x:Name="Grip"
            Data="M0,19 11,19 11,5 5.5,-0.5 0,5 z"
            SnapsToDevicePixels="True"
            VerticalAlignment="Center"
            UseLayoutRounding="True"
            Stretch="Fill"
            Fill="{StaticResource Slider.Thumb.Background.Normal}"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Hot}"/>
      </Trigger>
      <Trigger Property="IsDragging" Value="True">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Pressed}"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Disabled}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="SliderThumbHorizontalBottom" TargetType="{x:Type Thumb}">
    <Grid HorizontalAlignment="Center" VerticalAlignment="Center" UseLayoutRounding="True">
      <Path x:Name="Grip"
            Data="M0,0 11,0 11,14 5.5,19.5 0,14 z"
            SnapsToDevicePixels="True"
            VerticalAlignment="Center"
            UseLayoutRounding="True"
            Stretch="Fill"
            Fill="{StaticResource Slider.Thumb.Background.Normal}"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Hot}"/>
      </Trigger>
      <Trigger Property="IsDragging" Value="True">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Pressed}"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Disabled}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="SliderHorizontal" TargetType="{x:Type Slider}">
    <Border x:Name="Border"
            SnapsToDevicePixels="True"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            VerticalAlignment="Top">
      <Grid Margin="8,0">
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto"/>
          <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
          <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <aero10:TickBarEx x:Name="TopTick"
                          Height="4"
                          Placement="Top"
                          Visibility="Collapsed"
                          Margin="0,5,0,0"
                          Fill="{TemplateBinding Foreground}"
                          SelectionTickBrush="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <aero10:TickBarEx x:Name="BottomTick"
                          Grid.Row="2"
                          Height="4"
                          Placement="Bottom"
                          Visibility="Collapsed"
                          Margin="0,0,0,5"
                          Fill="{TemplateBinding Foreground}"
                          SelectionTickBrush="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Border x:Name="TrackBackground"
                Grid.Row="1"
                BorderThickness="1"
                Height="4"
                Margin="0,0,0,2"
                VerticalAlignment="center"
                BorderBrush="{StaticResource Slider.Track.Border}"
                Background="{StaticResource Slider.Track.Background}">
          <Canvas Margin="-1,0">
            <Rectangle x:Name="PART_SelectionRange"
                       Height="6"
                       Margin="0,2"
                       Visibility="Hidden"
                       Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
          </Canvas>
        </Border>
        <Track x:Name="PART_Track" Grid.Row="1" Margin="0,2">
          <Track.DecreaseRepeatButton>
            <RepeatButton Command="{x:Static Slider.DecreaseLarge}"
                          Style="{StaticResource RepeatButtonTransparent}"/>
          </Track.DecreaseRepeatButton>
          <Track.IncreaseRepeatButton>
            <RepeatButton Command="{x:Static Slider.IncreaseLarge}"
                          Style="{StaticResource RepeatButtonTransparent}"/>
          </Track.IncreaseRepeatButton>
          <Track.Thumb>
            <Thumb x:Name="Thumb"
                   OverridesDefaultStyle="True"
                   Focusable="False"
                   VerticalAlignment="Center"
                   Template="{StaticResource SliderThumbHorizontalBottom}"
                   Width="11"
                   Height="19"/>
          </Track.Thumb>
        </Track>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="TickPlacement" Value="TopLeft">
        <Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
        <Setter TargetName="Thumb" Property="Template" Value="{StaticResource SliderThumbHorizontalTop}"/>
        <Setter TargetName="TrackBackground" Property="Margin" Value="0,1,0,0"/>
        <Setter TargetName="PART_Track" Property="Margin" Value="0,1,0,2"/>
      </Trigger>
      <Trigger Property="TickPlacement" Value="BottomRight">
        <Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
        <Setter TargetName="Thumb" Property="Template" Value="{StaticResource SliderThumbHorizontalBottom}"/>
        <Setter TargetName="TrackBackground" Property="Margin" Value="0,0,0,2"/>
        <Setter TargetName="PART_Track" Property="Margin" Value="0,2,0,1"/>
      </Trigger>
      <Trigger Property="TickPlacement" Value="Both">
        <Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
        <Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
        <Setter TargetName="Thumb" Property="Template" Value="{StaticResource SliderThumbHorizontal}"/>
        <Setter TargetName="Thumb" Property="Width" Value="11"/>
        <Setter TargetName="Thumb" Property="Height" Value="22"/>
        <Setter TargetName="TrackBackground" Property="Margin" Value="0,0,0,0"/>
        <Setter TargetName="PART_Track" Property="Margin" Value="0,1"/>
      </Trigger>
      <Trigger Property="IsSelectionRangeEnabled" Value="True">
        <Setter TargetName="TrackBackground" Property="Height" Value="12"/>
        <Setter TargetName="PART_SelectionRange" Property="Visibility" Value="Visible"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelectionRangeEnabled" Value="True"/>
          <Condition Property="TickPlacement" Value="Both"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Thumb" Property="Width" Value="11"/>
        <Setter TargetName="Thumb" Property="Height" Value="24"/>
        <Setter TargetName="PART_SelectionRange" Property="Height" Value="12"/>
        <Setter TargetName="TrackBackground" Property="Height" Value="18"/>
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="SliderThumbVertical" TargetType="{x:Type Thumb}">
    <Grid HorizontalAlignment="Center"
          VerticalAlignment="Center"
          UseLayoutRounding="True">
      <Path x:Name="Grip"
            Data="M0,0 0,10 21,10 21,0 z"
            Margin="0,0,1,1"
            SnapsToDevicePixels="True"
            VerticalAlignment="Center"
            UseLayoutRounding="True"
            Stretch="Fill"
            Fill="{StaticResource Slider.Thumb.Background.Normal}"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Hot}"/>
      </Trigger>
      <Trigger Property="IsDragging" Value="True">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Pressed}"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Disabled}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="SliderThumbVerticalLeft" TargetType="{x:Type Thumb}">
    <Grid HorizontalAlignment="Center"
          VerticalAlignment="Center"
          UseLayoutRounding="True">
      <Path x:Name="Grip"
            Data="M19,0 19,11 5,11 -0.5,5.5 5,0 z"
            Stretch="Fill"
            Fill="{StaticResource Slider.Thumb.Background.Normal}"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Hot}"/>
      </Trigger>
      <Trigger Property="IsDragging" Value="True">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Pressed}"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Disabled}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="SliderThumbVerticalRight" TargetType="{x:Type Thumb}">
    <Grid HorizontalAlignment="Center"
          VerticalAlignment="Center"
          UseLayoutRounding="True">
      <Path x:Name="Grip"
            Data="M0,0 0,11 14,11 19.5,5.5 14,0 z"
            Stretch="Fill"
            Fill="{StaticResource Slider.Thumb.Background.Normal}"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Hot}"/>
      </Trigger>
      <Trigger Property="IsDragging" Value="True">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Pressed}"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Disabled}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="SliderVertical" TargetType="{x:Type Slider}">
    <Border x:Name="Border"
            SnapsToDevicePixels="True"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            HorizontalAlignment="Left">
      <Grid Margin="0,8">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding MinWidth}"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <aero10:TickBarEx x:Name="TopTick"
                          Width="4"
                          Placement="Left"
                          Visibility="Collapsed"
                          Margin="5,0,0,0"
                          Fill="{TemplateBinding Foreground}"
                          SelectionTickBrush="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <aero10:TickBarEx x:Name="BottomTick"
                          Grid.Column="2"
                          Width="4"
                          Placement="Right"
                          Visibility="Collapsed"
                          Margin="0,0,5,0"
                          Fill="{TemplateBinding Foreground}"
                          SelectionTickBrush="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Border x:Name="TrackBackground"
                Grid.Column="1"
                BorderThickness="1"
                Width="4"
                Margin="0,0,2,0"
                HorizontalAlignment="Center"
                BorderBrush="{StaticResource Slider.Track.Border}"
                Background="{StaticResource Slider.Track.Background}">
          <Canvas Margin="0,-1">
            <Rectangle x:Name="PART_SelectionRange"
                       Width="6"
                       Margin="2,0"
                       Visibility="Hidden"
                       Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
          </Canvas>
        </Border>
        <Track x:Name="PART_Track" Grid.Column="1" Margin="2,0">
          <Track.DecreaseRepeatButton>
            <RepeatButton Command="{x:Static Slider.DecreaseLarge}"
                          Style="{StaticResource RepeatButtonTransparent}"/>
          </Track.DecreaseRepeatButton>
          <Track.IncreaseRepeatButton>
            <RepeatButton Command="{x:Static Slider.IncreaseLarge}"
                          Style="{StaticResource RepeatButtonTransparent}"/>
          </Track.IncreaseRepeatButton>
          <Track.Thumb>
            <Thumb x:Name="Thumb"
                   OverridesDefaultStyle="True"
                   Focusable="False"
                   HorizontalAlignment="Center"
                   Width="19"
                   Height="11"
                   Template="{StaticResource SliderThumbVerticalRight}"/>
          </Track.Thumb>
        </Track>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="TickPlacement" Value="TopLeft">
        <Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
        <Setter TargetName="Thumb" Property="Template" Value="{StaticResource SliderThumbVerticalLeft}"/>
        <Setter TargetName="TrackBackground" Property="Margin" Value="1,0,0,0"/>
        <Setter TargetName="PART_Track" Property="Margin" Value="1,0,2,0"/>
      </Trigger>
      <Trigger Property="TickPlacement" Value="BottomRight">
        <Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
        <Setter TargetName="Thumb" Property="Template" Value="{StaticResource SliderThumbVerticalRight}"/>
        <Setter TargetName="TrackBackground" Property="Margin" Value="0,0,2,0"/>
        <Setter TargetName="PART_Track" Property="Margin" Value="2,0,1,0"/>
      </Trigger>
      <Trigger Property="TickPlacement" Value="Both">
        <Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
        <Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
        <Setter TargetName="Thumb" Property="Template" Value="{StaticResource SliderThumbVertical}"/>
        <Setter TargetName="Thumb" Property="Width" Value="22"/>
        <Setter TargetName="Thumb" Property="Height" Value="11"/>
        <Setter TargetName="TrackBackground" Property="Margin" Value="0"/>
        <Setter TargetName="PART_Track" Property="Margin" Value="1,0"/>
      </Trigger>
      <Trigger Property="IsSelectionRangeEnabled" Value="True">
        <Setter TargetName="TrackBackground" Property="Width" Value="12"/>
        <Setter TargetName="PART_SelectionRange" Property="Visibility" Value="Visible"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelectionRangeEnabled" Value="True"/>
          <Condition Property="TickPlacement" Value="Both"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Thumb" Property="Width" Value="24"/>
        <Setter TargetName="Thumb" Property="Height" Value="11"/>
        <Setter TargetName="PART_SelectionRange" Property="Width" Value="12"/>
        <Setter TargetName="TrackBackground" Property="Width" Value="18"/>
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style TargetType="{x:Type Slider}">
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="Foreground" Value="{StaticResource Slider.Thumb.Foreground.Normal}"/>
    <Setter Property="Template" Value="{StaticResource SliderHorizontal}"/>
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="Template" Value="{StaticResource SliderVertical}"/>
      </Trigger>
    </Style.Triggers>
  </Style>


  <!-- GroupBox ============================================================ -->

  <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>

  <Style TargetType="{x:Type GroupBox}">
    <Setter Property="BorderBrush" Value="#FFDCDCDC"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type GroupBox}">
          <Grid SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="6"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="6"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition Height="Auto"/>
              <RowDefinition Height="*"/>
              <RowDefinition Height="6"/>
            </Grid.RowDefinitions>
            <Border Grid.Row="1"
                    Grid.RowSpan="3"
                    Grid.ColumnSpan="4"
                    Background="{TemplateBinding Background}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BorderBrush="Transparent"/>

            <Border Grid.Row="1"
                    Grid.RowSpan="3"
                    Grid.ColumnSpan="4"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Margin="0,-1,0,1">
              <Border.OpacityMask>
                <MultiBinding Converter="{StaticResource BorderGapMaskConverter}"
                              ConverterParameter="7">
                  <Binding Path="ActualWidth" ElementName="Header"/>
                  <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                  <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                </MultiBinding>
              </Border.OpacityMask>
            </Border>

            <Border x:Name="Header"
                    Padding="3,0,1,0"
                    Grid.RowSpan="2"
                    Grid.Column="1">
              <ContentPresenter ContentSource="Header"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </Border>
            <ContentPresenter Grid.Row="2"
                              Grid.Column="1"
                              Grid.ColumnSpan="2"
                              Margin="{TemplateBinding Padding}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <!-- Expander ============================================================ -->

  <SolidColorBrush x:Key="Expander.Glyph.Normal" Color="#BF000000"/>
  <SolidColorBrush x:Key="Expander.Glyph.Hot" Color="#FF1CC4F7"/>
  <SolidColorBrush x:Key="Expander.Glyph.Pressed" Color="#FF1CC4F7"/>

  <Geometry x:Key="ExpanderGlyphCollapsed">
    F1 M0.88,2.12 2.119,0.881 6.119,4.881 6.737,5.5 2.119,10.119 0.881,8.881 4.881,4.881 5.5,5.5 4.881,6.119 0.881,2.119 z
  </Geometry>

  <Geometry x:Key="ExpanderGlyphExpanded">
    F1 M0.88,2.12 2.119,0.881 6.119,4.881 5.5,5.5 4.881,4.881 8.881,0.881 10.119,2.119 5.5,6.737 4.881,6.119 0.881,2.119 z
  </Geometry>

  <Style x:Key="ExpanderHeaderFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border>
            <Rectangle Margin="-1"
                       SnapsToDevicePixels="True"
                       Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                       StrokeThickness="1"
                       StrokeDashArray="1 1"
                       StrokeDashOffset="1.5"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Background="Transparent" Padding="{TemplateBinding Padding}">
            <Grid SnapsToDevicePixels="False">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="19"/>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>
              <Path x:Name="Glyph"
                    Data="{StaticResource ExpanderGlyphCollapsed}"
                    Fill="{StaticResource Expander.Glyph.Normal}"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    SnapsToDevicePixels="False"/>
              <ContentPresenter Grid.Column="1"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                SnapsToDevicePixels="True"
                                RecognizesAccessKey="True"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Glyph" Property="Data" Value="{StaticResource ExpanderGlyphExpanded}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Glyph" Property="Fill" Value="{StaticResource Expander.Glyph.Hot}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Glyph" Property="Fill" Value="{StaticResource Expander.Glyph.Pressed}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Glyph" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Background="Transparent" Padding="{TemplateBinding Padding}">
            <Grid SnapsToDevicePixels="False">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="19"/>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>
              <Grid>
                <Grid.LayoutTransform>
                  <TransformGroup>
                    <TransformGroup.Children>
                      <RotateTransform Angle="-180"/>
                    </TransformGroup.Children>
                  </TransformGroup>
                </Grid.LayoutTransform>
                <Path x:Name="Glyph"
                      Data="{StaticResource ExpanderGlyphCollapsed}"
                      Fill="{StaticResource Expander.Glyph.Normal}"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      SnapsToDevicePixels="False"/>
              </Grid>
              <ContentPresenter Grid.Column="1"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                SnapsToDevicePixels="True"
                                RecognizesAccessKey="True"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Glyph" Property="Data" Value="{StaticResource ExpanderGlyphExpanded}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Glyph" Property="Fill" Value="{StaticResource Expander.Glyph.Hot}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Glyph" Property="Fill" Value="{StaticResource Expander.Glyph.Pressed}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Glyph" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Background="Transparent" Padding="{TemplateBinding Padding}">
            <Grid SnapsToDevicePixels="False">
              <Grid.RowDefinitions>
                <RowDefinition Height="19"/>
                <RowDefinition Height="*"/>
              </Grid.RowDefinitions>
              <Grid>
                <Grid.LayoutTransform>
                  <TransformGroup>
                    <TransformGroup.Children>
                      <RotateTransform Angle="90"/>
                    </TransformGroup.Children>
                  </TransformGroup>
                </Grid.LayoutTransform>
                <Path x:Name="Glyph"
                      Data="{StaticResource ExpanderGlyphCollapsed}"
                      Fill="{StaticResource Expander.Glyph.Normal}"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      SnapsToDevicePixels="False"/>
              </Grid>
              <ContentPresenter Grid.Row="1"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Top"
                                SnapsToDevicePixels="True"
                                RecognizesAccessKey="True"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Glyph" Property="Data" Value="{StaticResource ExpanderGlyphExpanded}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Glyph" Property="Fill" Value="{StaticResource Expander.Glyph.Hot}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Glyph" Property="Fill" Value="{StaticResource Expander.Glyph.Pressed}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Glyph" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Background="Transparent" Padding="{TemplateBinding Padding}">
            <Grid SnapsToDevicePixels="False">
              <Grid.RowDefinitions>
                <RowDefinition Height="19"/>
                <RowDefinition Height="*"/>
              </Grid.RowDefinitions>
              <Grid x:Name="Grid">
                <Grid.LayoutTransform>
                  <RotateTransform Angle="90"/>
                </Grid.LayoutTransform>
                <Path x:Name="Glyph"
                      Data="{StaticResource ExpanderGlyphCollapsed}"
                      Fill="{StaticResource Expander.Glyph.Normal}"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      SnapsToDevicePixels="False"/>
              </Grid>
              <ContentPresenter Grid.Row="1"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Top"
                                SnapsToDevicePixels="True"
                                RecognizesAccessKey="True"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Glyph" Property="Data" Value="{StaticResource ExpanderGlyphExpanded}"/>
              <Setter TargetName="Grid" Property="LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Glyph" Property="Fill" Value="{StaticResource Expander.Glyph.Hot}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Glyph" Property="Fill" Value="{StaticResource Expander.Glyph.Pressed}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Glyph" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type Expander}">
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="VerticalContentAlignment" Value="Stretch"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Expander}">
          <Border BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Background="{TemplateBinding Background}"
                  SnapsToDevicePixels="True">
            <DockPanel>
              <ToggleButton x:Name="HeaderSite"
                            DockPanel.Dock="Top"
                            Margin="1"
                            MinWidth="0"
                            MinHeight="0"
                            Style="{StaticResource ExpanderDownHeaderStyle}"
                            FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}"
                            IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Content="{TemplateBinding Header}"
                            ContentTemplate="{TemplateBinding HeaderTemplate}"
                            ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                            Foreground="{TemplateBinding Foreground}"
                            Padding="{TemplateBinding Padding}"
                            FontFamily="{TemplateBinding FontFamily}"
                            FontSize="{TemplateBinding FontSize}"
                            FontStyle="{TemplateBinding FontStyle}"
                            FontStretch="{TemplateBinding FontStretch}"
                            FontWeight="{TemplateBinding FontWeight}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
              <ContentPresenter x:Name="ExpandSite"
                                DockPanel.Dock="Bottom"
                                Visibility="Collapsed"
                                Focusable="False"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Margin="{TemplateBinding Padding}"/>
            </DockPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="True">
              <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Right">
              <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Right"/>
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Left"/>
              <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource ExpanderRightHeaderStyle}"/>
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Up">
              <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Top"/>
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Bottom"/>
              <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource ExpanderUpHeaderStyle}"/>
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Left">
              <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Left"/>
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Right"/>
              <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground"
                      Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <!-- ResizeGrip ========================================================== -->

  <Style TargetType="{x:Type ResizeGrip}">
    <Setter Property="MinWidth"
            Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
    <Setter Property="MinHeight"
            Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Padding" Value="0,0,3,2"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ResizeGrip}">
          <Grid SnapsToDevicePixels="True" Background="{TemplateBinding Background}">
            <Path Data="M 0,6 2,6 2,8 0,8  M 3,6 5,6 5,8 3,8  M 6,6 8,6 8,8 6,8  M 3,3 5,3 5,5 3,5  M 6,3 8,3 8,5 6,5  M 6,0 8,0 8,2 6,2"
                  Fill="#FFBFBFBF"
                  Margin="{TemplateBinding Padding}"
                  HorizontalAlignment="Right"
                  VerticalAlignment="Bottom"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <!-- StatusBar =========================================================== -->

  <Style TargetType="{x:Type StatusBar}">
    <Setter Property="Background" Value="#FFF0F0F0"/>
    <Setter Property="BorderBrush" Value="#FFD7D7D7"/>
    <Setter Property="BorderThickness" Value="0,1,0,0"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.StatusFontFamilyKey}}"/>
    <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.StatusFontSizeKey}}"/>
    <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.StatusFontStyleKey}}"/>
    <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.StatusFontWeightKey}}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type StatusBar}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Padding="{TemplateBinding Padding}"
                  SnapsToDevicePixels="True">
            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type StatusBarItem}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Padding" Value="2,5,9,4"/>
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type StatusBarItem}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Padding="{TemplateBinding Padding}"
                  SnapsToDevicePixels="True">
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground"
                      Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Static StatusBar.SeparatorStyleKey}" TargetType="{x:Type Separator}">
    <Setter Property="Background" Value="#FFD7D7D7"/>
    <Setter Property="MinWidth" Value="1"/>
    <Setter Property="MinHeight" Value="1"/>
    <Setter Property="Margin" Value="2,1"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Separator}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  SnapsToDevicePixels="True"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <!-- ToolBar ============================================================= -->

  <SolidColorBrush x:Key="ToolBar.Tray.Background" Color="#FFFFFFFF"/>
  <SolidColorBrush x:Key="ToolBar.Tray.Border" Color="#FFDCDCDC"/>
  <SolidColorBrush x:Key="ToolBar.Background" Color="#FFFFFFFF"/>

  <SolidColorBrush x:Key="ToolBar.TextBox.Background.Normal" Color="#FFFFFFFF"/>
  <SolidColorBrush x:Key="ToolBar.TextBox.Background.Disabled" Color="#FFF0F0F0"/>
  <SolidColorBrush x:Key="ToolBar.TextBox.Border.Normal" Color="#FFDCDCDC"/>
  <SolidColorBrush x:Key="ToolBar.TextBox.Border.Disabled" Color="#FFCCCCCC"/>
  <SolidColorBrush x:Key="ToolBar.Gripper.Fill" Color="#FF6D6D6D"/>
  <SolidColorBrush x:Key="ToolBar.Separator.Background" Color="#FFB6BDC5"/>

  <SolidColorBrush x:Key="ToolBar.Button.Background.Normal" Color="#00000000"/>
  <SolidColorBrush x:Key="ToolBar.Button.Background.Hot" Color="#1A0089FF"/>
  <SolidColorBrush x:Key="ToolBar.Button.Background.Pressed" Color="#33008CFF"/>
  <SolidColorBrush x:Key="ToolBar.Button.Background.Checked" Color="#33008CFF"/>
  <SolidColorBrush x:Key="ToolBar.Button.Background.Disabled" Color="#00000000"/>
  <SolidColorBrush x:Key="ToolBar.Button.Border.Normal" Color="#00000000"/>
  <SolidColorBrush x:Key="ToolBar.Button.Border.Hot" Color="#33008CFF"/>
  <SolidColorBrush x:Key="ToolBar.Button.Border.Pressed" Color="#66008CFF"/>
  <SolidColorBrush x:Key="ToolBar.Button.Border.Checked" Color="#66008CFF"/>
  <SolidColorBrush x:Key="ToolBar.Button.Border.Disabled" Color="#00000000"/>

  <Style x:Key="ToolBarMainPanelBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="Margin" Value="0,0,11,0"/>
  </Style>

  <Style x:Key="{x:Static ToolBar.SeparatorStyleKey}" TargetType="{x:Type Separator}">
    <Setter Property="Background" Value="{StaticResource ToolBar.Separator.Background}"/>
    <Setter Property="MinWidth" Value="1"/>
    <Setter Property="MinHeight" Value="1"/>
    <Setter Property="Margin" Value="2,2,2,2"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Separator}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  SnapsToDevicePixels="True"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}">
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Padding" Value="2"/>
    <Setter Property="HorizontalAlignment" Value="Center"/>
    <Setter Property="VerticalAlignment" Value="Center"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="Border"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Padding="{TemplateBinding Padding}"
                  SnapsToDevicePixels="True">
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Border" Property="Background" Value="{StaticResource ToolBar.Button.Background.Hot}"/>
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource ToolBar.Button.Border.Hot}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Border" Property="Background" Value="{StaticResource ToolBar.Button.Background.Pressed}"/>
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource ToolBar.Button.Border.Pressed}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Border" Property="Background" Value="{StaticResource ToolBar.Button.Background.Disabled}"/>
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource ToolBar.Button.Border.Disabled}"/>
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" TargetType="{x:Type ToggleButton}">
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Padding" Value="2"/>
    <Setter Property="HorizontalAlignment" Value="Center"/>
    <Setter Property="VerticalAlignment" Value="Center"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border x:Name="Border"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Padding="{TemplateBinding Padding}"
                  SnapsToDevicePixels="True">
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Border" Property="Background" Value="{StaticResource ToolBar.Button.Background.Hot}"/>
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource ToolBar.Button.Border.Hot}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Border" Property="Background" Value="{StaticResource ToolBar.Button.Background.Pressed}"/>
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource ToolBar.Button.Border.Pressed}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Border" Property="Background" Value="{StaticResource ToolBar.Button.Background.Checked}"/>
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource ToolBar.Button.Border.Checked}"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True"/>
                <Condition Property="IsChecked" Value="True"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Property="Background" Value="{StaticResource ToolBar.Button.Background.Pressed}"/>
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource ToolBar.Button.Border.Pressed}"/>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}"
         BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
         TargetType="{x:Type CheckBox}"/>

  <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}"
         BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
         TargetType="{x:Type RadioButton}"/>

  <Style x:Key="ToolBar.ComboBox.DropDownButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Width" Value="Auto"/>
    <Setter Property="MinWidth" Value="0"/>
    <Setter Property="MinHeight" Value="0"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="ClickMode" Value="Press"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid Background="Transparent">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto" SharedSizeGroup="ComboBoxButton"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="Chrome"
                    Grid.Column="1"
                    Width="13"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    SnapsToDevicePixels="True">
              <Border.BorderThickness>
                <Binding Path="BorderThickness"
                         RelativeSource="{RelativeSource TemplatedParent}"
                         Converter="{StaticResource ThicknessMaskConverter}"
                         ConverterParameter="{x:Static aero10:ThicknessMask.Left}"/>
              </Border.BorderThickness>
              <Border.Margin>
                <Binding Path="BorderThickness"
                         RelativeSource="{RelativeSource TemplatedParent}"
                         Converter="{StaticResource ThicknessMaskConverter}"
                         ConverterParameter="{x:Static aero10:ThicknessMask.NotLeft}"/>
              </Border.Margin>
              <Path x:Name="ArrowDownPath"
                    Data="M 0,0 6,0 3,3 z"
                    Fill="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"/>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True"/>
                <Condition Property="IsChecked" Value="False"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Chrome" Property="Background" Value="{StaticResource ToolBar.Button.Background.Hot}"/>
              <Setter TargetName="Chrome" Property="BorderBrush" Value="{StaticResource ToolBar.Button.Border.Hot}"/>
            </MultiTrigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Chrome" Property="Background" Value="{StaticResource ToolBar.Button.Background.Pressed}"/>
              <Setter TargetName="Chrome" Property="BorderBrush" Value="{StaticResource ToolBar.Button.Border.Pressed}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Chrome" Property="Background" Value="{StaticResource ToolBar.Button.Background.Pressed}"/>
              <Setter TargetName="Chrome" Property="BorderBrush" Value="{StaticResource ToolBar.Button.Border.Pressed}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Chrome" Property="Background" Value="{x:Null}"/>
              <Setter TargetName="Chrome" Property="BorderBrush" Value="{x:Null}"/>
              <Setter TargetName="ArrowDownPath" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Static ToolBar.ComboBoxStyleKey}" TargetType="{x:Type ComboBox}">
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
    <Setter Property="Background" Value="{StaticResource ToolBar.TextBox.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ToolBar.TextBox.Border.Normal}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Margin" Value="1,0"/>
    <Setter Property="Padding" Value="1"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="HorizontalAlignment" Value="Center"/>
    <Setter Property="VerticalAlignment" Value="Center"/>
    <Setter Property="MinHeight" Value="18"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <Grid SnapsToDevicePixels="True">
            <Grid Grid.IsSharedSizeScope="True">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto" SharedSizeGroup="ComboBoxButton"/>
              </Grid.ColumnDefinitions>
              <Border x:Name="Border"
                      Grid.ColumnSpan="2"
                      Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"/>
              <Border x:Name="SelectedContentBorder" Margin="2">
                <ContentPresenter x:Name="ContentSite"
                                  Content="{TemplateBinding SelectionBoxItem}"
                                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                  ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                  Margin="{TemplateBinding Padding}"
                                  VerticalAlignment="Center"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
              </Border>
              <ToggleButton x:Name="DropDownButton"
                            Grid.ColumnSpan="2"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Style="{StaticResource ToolBar.ComboBox.DropDownButtonStyle}"
                            IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
              <TextBox x:Name="PART_EditableTextBox"
                       Padding="{TemplateBinding Padding}"
                       Margin="1"
                       MinHeight="18"
                       Style="{StaticResource ComboBox.Editable.TextBox}"
                       Visibility="Collapsed"
                       IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                       VerticalAlignment="Center"/>
            </Grid>
            <Popup x:Name="PART_Popup"
                   AllowsTransparency="True"
                   Placement="Bottom"
                   IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                   Focusable="False"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
              <aero10:SystemDropShadowChrome x:Name="Shdw"
                                             Color="Transparent"
                                             MinWidth="{TemplateBinding ActualWidth}"
                                             MaxHeight="{TemplateBinding MaxDropDownHeight}">
                <Border x:Name="DropDownBorder"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{StaticResource Menu.Popup.Border}"
                        BorderThickness="1">
                  <ScrollViewer x:Name="DropDownScrollViewer">
                    <Grid Background="{Binding Background, ElementName=DropDownBorder}"
                          RenderOptions.ClearTypeHint="Enabled">
                      <ItemsPresenter x:Name="ItemsPresenter"
                                      KeyboardNavigation.DirectionalNavigation="Contained"/>
                    </Grid>
                  </ScrollViewer>
                </Border>
              </aero10:SystemDropShadowChrome>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsKeyboardFocusWithin" Value="True"/>
                <Condition Property="IsDropDownOpen" Value="False"/>
                <Condition Property="IsEditable" Value="False"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="SelectedContentBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </MultiTrigger>
            <Trigger Property="IsEditable" Value="True">
              <Setter TargetName="ContentSite" Property="Visibility" Value="Collapsed"/>
              <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource ToolBar.Button.Border.Hot}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource ToolBar.Button.Border.Pressed}"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
              <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5"/>
              <Setter TargetName="Shdw" Property="SnapsToDevicePixels" Value="True"/>
              <Setter TargetName="Shdw" Property="Color" Value="#71000000"/>
            </Trigger>
            <Trigger Property="HasItems" Value="False">
              <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsGrouping" Value="True"/>
                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
              </MultiTrigger.Conditions>
              <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsKeyboardFocusWithin" Value="True"/>
                <Condition Property="IsDropDownOpen" Value="False"/>
                <Condition Property="IsEditable" Value="False"/>
              </MultiTrigger.Conditions>
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
            </MultiTrigger>
            <Trigger Property="IsEditable" Value="True">
              <Setter Property="Padding" Value="2"/>
              <Setter Property="IsTabStop" Value="False"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
              <Setter TargetName="Border" Property="Background" Value="{StaticResource ToolBar.TextBox.Background.Disabled}"/>
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource ToolBar.TextBox.Border.Disabled}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Static ToolBar.TextBoxStyleKey}" TargetType="{x:Type TextBox}">
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
    <Setter Property="Background" Value="{StaticResource ToolBar.TextBox.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ToolBar.TextBox.Border.Normal}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Margin" Value="1,0"/>
    <Setter Property="Padding" Value="2"/>
    <Setter Property="HorizontalAlignment" Value="Center"/>
    <Setter Property="VerticalAlignment" Value="Center"/>
    <Setter Property="MinHeight" Value="18"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Border x:Name="Border"
                  Background="{TemplateBinding Background}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  SnapsToDevicePixels="True">
            <ScrollViewer x:Name="PART_ContentHost"
                          VerticalAlignment="Center"
                          MinHeight="18"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource ToolBar.Button.Border.Hot}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource ToolBar.Button.Border.Pressed}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
              <Setter TargetName="Border" Property="Background" Value="{StaticResource ToolBar.TextBox.Background.Disabled}"/>
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource ToolBar.TextBox.Border.Disabled}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Static ToolBar.MenuStyleKey}" TargetType="{x:Type Menu}">
    <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
    <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
    <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
    <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
    <Setter Property="Background" Value="{x:Null}"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="VerticalContentAlignment" Value="Stretch"/>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Continue"/>
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <StackPanel Orientation="Horizontal"/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Menu}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Padding="{TemplateBinding Padding}"
                  SnapsToDevicePixels="True">
            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Resources>
      <ControlTemplate x:Key="{ComponentResourceKey {x:Type MenuItem}, TopLevelItemTemplateKey}"
                       TargetType="{x:Type MenuItem}">
        <Border x:Name="TemplateRoot"
                SnapsToDevicePixels="True"
                BorderThickness="{TemplateBinding BorderThickness}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}">
          <Grid VerticalAlignment="Center">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <ContentPresenter x:Name="Icon"
                              ContentSource="Icon"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"
                              Width="16"
                              Height="16"
                              Margin="2"/>
            <Path x:Name="GlyphBorder"
                  Data="{StaticResource Menu.CheckmarkGlyph}"
                  FlowDirection="LeftToRight"
                  Margin="2,-2"
                  Width="16"
                  Height="16"
                  Visibility="Collapsed"
                  VerticalAlignment="Center"
                  Fill="{StaticResource Menu.PopupCheck.Normal.Foreground}"/>
            <ContentPresenter Grid.Column="1"
                              ContentSource="Header"
                              RecognizesAccessKey="True"
                              Margin="{TemplateBinding Padding}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
          </Grid>
        </Border>
        <ControlTemplate.Triggers>
          <Trigger Property="Icon" Value="{x:Null}">
            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
          </Trigger>
          <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="GlyphBorder" Property="Visibility" Value="Visible"/>
            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
          </Trigger>
          <Trigger Property="IsMouseOver" Value="True">
            <Setter TargetName="TemplateRoot" Property="Background"
                    Value="{StaticResource ToolBar.Button.Background.Hot}"/>
            <Setter TargetName="TemplateRoot" Property="BorderBrush"
                    Value="{StaticResource ToolBar.Button.Border.Hot}"/>
          </Trigger>
          <Trigger Property="IsSubmenuOpen" Value="True">
            <Setter TargetName="TemplateRoot" Property="Background"
                    Value="{StaticResource ToolBar.Button.Background.Pressed}"/>
            <Setter TargetName="TemplateRoot" Property="BorderBrush"
                    Value="{StaticResource ToolBar.Button.Border.Pressed}"/>
          </Trigger>
          <Trigger Property="IsPressed" Value="True">
            <Setter TargetName="TemplateRoot" Property="Background"
                    Value="{StaticResource ToolBar.Button.Background.Pressed}"/>
            <Setter TargetName="TemplateRoot" Property="BorderBrush"
                    Value="{StaticResource ToolBar.Button.Border.Pressed}"/>
          </Trigger>
          <Trigger Property="IsEnabled" Value="False">
            <Setter TargetName="TemplateRoot" Property="TextElement.Foreground"
                    Value="{StaticResource Menu.BarItem.Disabled.Foreground}"/>
            <Setter TargetName="GlyphBorder" Property="Fill"
                    Value="{StaticResource Menu.BarItem.Disabled.Foreground}"/>
          </Trigger>
        </ControlTemplate.Triggers>
      </ControlTemplate>

      <ControlTemplate x:Key="{ComponentResourceKey {x:Type MenuItem}, TopLevelHeaderTemplateKey}"
                       TargetType="{x:Type MenuItem}">
        <Border x:Name="TemplateRoot"
                SnapsToDevicePixels="True"
                BorderThickness="{TemplateBinding BorderThickness}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}">
          <Grid VerticalAlignment="Center">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <ContentPresenter x:Name="Icon"
                              ContentSource="Icon"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"
                              Width="16"
                              Height="16"
                              Margin="2"/>
            <Path x:Name="GlyphBorder"
                  Data="{StaticResource Menu.CheckmarkGlyph}"
                  FlowDirection="LeftToRight"
                  Margin="2"
                  Width="16"
                  Height="16"
                  Visibility="Collapsed"
                  VerticalAlignment="Center"
                  Fill="{TemplateBinding Menu.Foreground}"/>
            <ContentPresenter Grid.Column="1"
                              ContentSource="Header"
                              RecognizesAccessKey="True"
                              Margin="{TemplateBinding Padding}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            <Popup x:Name="PART_Popup"
                   AllowsTransparency="True"
                   Focusable="False"
                   IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   Placement="Bottom"
                   PlacementTarget="{Binding ElementName=TemplateRoot}">
              <aero10:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                <Border x:Name="SubMenuBorder"
                        Background="{StaticResource Menu.Popup.Background}"
                        BorderBrush="{StaticResource Menu.Popup.Border}"
                        BorderThickness="1"
                        Padding="2">
                  <ScrollViewer x:Name="SubMenuScrollViewer"
                                Style="{DynamicResource {ComponentResourceKey {x:Type FrameworkElement}, MenuScrollViewer}}">
                    <Grid Background="{Binding Background, ElementName=SubMenuBorder}"
                          RenderOptions.ClearTypeHint="Enabled">
                      <Border x:Name="PopupGutter"
                              HorizontalAlignment="Left"
                              Width="28"
                              Background="{StaticResource Menu.PopupGutter.Background}"
                              BorderBrush="{StaticResource Menu.PopupGutter.Border}"
                              BorderThickness="0,0,1,0"/>
                      <ItemsPresenter x:Name="ItemsPresenter"
                                      KeyboardNavigation.DirectionalNavigation="Cycle"
                                      KeyboardNavigation.TabNavigation="Cycle"
                                      Grid.IsSharedSizeScope="True"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Grid>
                  </ScrollViewer>
                </Border>
              </aero10:SystemDropShadowChrome>
            </Popup>
          </Grid>
        </Border>
        <ControlTemplate.Triggers>
          <Trigger Property="IsSuspendingPopupAnimation" Value="True">
            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None"/>
          </Trigger>
          <Trigger Property="Icon" Value="{x:Null}">
            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
          </Trigger>
          <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="GlyphBorder" Property="Visibility" Value="Visible"/>
            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
          </Trigger>
          <Trigger Property="IsMouseOver" Value="True">
            <Setter TargetName="TemplateRoot" Property="Background"
                    Value="{StaticResource ToolBar.Button.Background.Hot}"/>
            <Setter TargetName="TemplateRoot" Property="BorderBrush"
                    Value="{StaticResource ToolBar.Button.Border.Hot}"/>
          </Trigger>
          <Trigger Property="IsSubmenuOpen" Value="True">
            <Setter TargetName="TemplateRoot" Property="Background"
                    Value="{StaticResource ToolBar.Button.Background.Pressed}"/>
            <Setter TargetName="TemplateRoot" Property="BorderBrush"
                    Value="{StaticResource ToolBar.Button.Border.Pressed}"/>
          </Trigger>
          <Trigger Property="IsPressed" Value="True">
            <Setter TargetName="TemplateRoot" Property="Background"
                    Value="{StaticResource ToolBar.Button.Background.Pressed}"/>
            <Setter TargetName="TemplateRoot" Property="BorderBrush"
                    Value="{StaticResource ToolBar.Button.Border.Pressed}"/>
          </Trigger>
          <Trigger Property="IsEnabled" Value="False">
            <Setter TargetName="TemplateRoot" Property="TextElement.Foreground"
                    Value="{StaticResource Menu.BarItem.Disabled.Foreground}"/>
            <Setter TargetName="GlyphBorder" Property="Fill"
                    Value="{StaticResource Menu.BarItem.Disabled.Foreground}"/>
          </Trigger>
          <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
            <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5"/>
            <Setter TargetName="Shdw" Property="Color" Value="#71000000"/>
          </Trigger>
        </ControlTemplate.Triggers>
      </ControlTemplate>

      <Style TargetType="{x:Type MenuItem}">
        <Style.Triggers>
          <Trigger Property="Role" Value="TopLevelHeader">
            <Setter Property="Padding" Value="6,2"/>
          </Trigger>
          <Trigger Property="Role" Value="TopLevelItem">
            <Setter Property="Padding" Value="6,2"/>
          </Trigger>
        </Style.Triggers>
      </Style>
    </Style.Resources>
  </Style>

  <Style x:Key="ToolBar.ThumbStyle" TargetType="{x:Type Thumb}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Background="Transparent"
                  Padding="{TemplateBinding Padding}"
                  SnapsToDevicePixels="True">
            <Rectangle>
              <Rectangle.Fill>
                <DrawingBrush Viewbox="0,0,4,4"
                              Viewport="0,0,4,4"
                              TileMode="Tile"
                              ViewportUnits="Absolute"
                              ViewboxUnits="Absolute">
                  <DrawingBrush.Drawing>
                    <DrawingGroup>
                      <DrawingGroup.Children>
                        <GeometryDrawing Brush="#B2FFFFFF"
                                         Geometry="M 1,1 1,3 3,3 3,1 z"/>
                        <GeometryDrawing Brush="#3C000000"
                                         Geometry="M 0,0 0,2 2,2 2,0 z"/>
                      </DrawingGroup.Children>
                    </DrawingGroup>
                  </DrawingBrush.Drawing>
                </DrawingBrush>
              </Rectangle.Fill>
            </Rectangle>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Cursor" Value="SizeAll"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="MinWidth" Value="0"/>
    <Setter Property="MinHeight" Value="0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border x:Name="Bd"
                  Background="{TemplateBinding Background}"
                  SnapsToDevicePixels="True">
            <Canvas Width="6"
                    Height="7"
                    Margin="7,2,2,2"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Bottom"
                    SnapsToDevicePixels="True">
              <Path Stroke="{TemplateBinding Foreground}" Data="M 0 0.5 L 5 0.5"/>
              <Path Fill="{TemplateBinding Foreground}" Data="M -0.5 3 L 5.5 3 L 2.5 6 Z"/>
            </Canvas>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Bd" Property="Background" Value="{StaticResource ToolBar.Button.Background.Hot}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
              <Setter TargetName="Bd" Property="Background" Value="{StaticResource ToolBar.Button.Background.Hot}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Bd" Property="Background" Value="{StaticResource ToolBar.Button.Background.Checked}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="{StaticResource ToolBar.Gripper.Fill}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ToolBarVerticalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="MinWidth" Value="0"/>
    <Setter Property="MinHeight" Value="0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border x:Name="Bd"
                  Background="{TemplateBinding Background}"
                  SnapsToDevicePixels="True">
            <Canvas Width="7"
                    Height="6"
                    Margin="2,7,2,2"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Bottom"
                    SnapsToDevicePixels="True">
              <Path Stroke="White" Data="M 1.5 1 L 1.5 6"/>
              <Path Stroke="{TemplateBinding Foreground}" Data="M 0.5 0 L 0.5 5"/>
              <Path Fill="White" Data="M 3.5 0.5 L 7 3.5 L 4 6.5 Z"/>
              <Path Fill="{TemplateBinding Foreground}" Data="M 3 -0.5 L 6 2.5 L 3 5.5 Z"/>
            </Canvas>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Bd" Property="Background" Value="{StaticResource ToolBar.Button.Background.Hot}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
              <Setter TargetName="Bd" Property="Background" Value="{StaticResource ToolBar.Button.Background.Hot}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Bd" Property="Background" Value="{StaticResource ToolBar.Button.Background.Checked}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="{StaticResource ToolBar.Gripper.Fill}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type ToolBar}">
    <Setter Property="Background" Value="{StaticResource ToolBar.Background}"/>
    <Setter Property="Padding" Value="1"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToolBar}">
          <Grid x:Name="Grid" SnapsToDevicePixels="True">
            <Grid x:Name="OverflowGrid" HorizontalAlignment="Right">
              <ToggleButton x:Name="OverflowButton"
                            FocusVisualStyle="{x:Null}"
                            IsEnabled="{TemplateBinding HasOverflowItems}"
                            Style="{StaticResource ToolBarHorizontalOverflowButtonStyle}"
                            IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press"/>
              <Popup x:Name="OverflowPopup"
                     AllowsTransparency="True"
                     Placement="Bottom"
                     IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}"
                     StaysOpen="False"
                     Focusable="False"
                     PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <aero10:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                  <Border x:Name="ToolBarSubMenuBorder"
                          Background="{StaticResource ToolBar.Background}"
                          BorderBrush="{StaticResource Menu.Popup.Border}"
                          BorderThickness="1"
                          RenderOptions.ClearTypeHint="Enabled">
                    <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel"
                                          Margin="2"
                                          WrapWidth="200"
                                          Focusable="True"
                                          FocusVisualStyle="{x:Null}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          KeyboardNavigation.TabNavigation="Cycle"
                                          KeyboardNavigation.DirectionalNavigation="Cycle"/>
                  </Border>
                </aero10:SystemDropShadowChrome>
              </Popup>
            </Grid>
            <Border x:Name="MainPanelBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Padding="{TemplateBinding Padding}"
                    Style="{StaticResource ToolBarMainPanelBorderStyle}">
              <DockPanel KeyboardNavigation.TabIndex="1"
                         KeyboardNavigation.TabNavigation="Local">
                <Thumb x:Name="ToolBarThumb"
                       Style="{StaticResource ToolBar.ThumbStyle}"
                       Width="8"
                       Padding="3,4,2,4"/>
                <ContentPresenter x:Name="ToolBarHeader"
                                  ContentSource="Header"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Margin="4,0,4,0"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                <ToolBarPanel x:Name="PART_ToolBarPanel"
                              IsItemsHost="True"
                              Margin="0,1,2,1"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
              </DockPanel>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsOverflowOpen" Value="True">
              <Setter TargetName="ToolBarThumb" Property="IsEnabled" Value="False"/>
            </Trigger>
            <Trigger Property="Header" Value="{x:Null}">
              <Setter TargetName="ToolBarHeader" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="ToolBarTray.IsLocked" Value="True">
              <Setter TargetName="ToolBarThumb" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger SourceName="OverflowPopup" Property="HasDropShadow" Value="True">
              <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5"/>
              <Setter TargetName="Shdw" Property="SnapsToDevicePixels" Value="True"/>
              <Setter TargetName="Shdw" Property="Color" Value="#71000000"/>
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
              <Setter TargetName="OverflowButton" Property="Style" Value="{StaticResource ToolBarVerticalOverflowButtonStyle}"/>
              <Setter TargetName="ToolBarThumb" Property="Width" Value="Auto"/>
              <Setter TargetName="ToolBarThumb" Property="Height" Value="8"/>
              <Setter TargetName="ToolBarThumb" Property="Padding" Value="4,3,4,2"/>
              <Setter TargetName="ToolBarHeader" Property="Margin" Value="0,4,0,4"/>
              <Setter TargetName="PART_ToolBarPanel" Property="Margin" Value="1,0,1,2"/>
              <Setter TargetName="ToolBarThumb" Property="DockPanel.Dock" Value="Top"/>
              <Setter TargetName="ToolBarHeader" Property="DockPanel.Dock" Value="Top"/>
              <Setter TargetName="OverflowGrid" Property="HorizontalAlignment" Value="Stretch"/>
              <Setter TargetName="OverflowGrid" Property="VerticalAlignment" Value="Bottom"/>
              <Setter TargetName="OverflowPopup" Property="Placement" Value="Right"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type ToolBarTray}">
    <Setter Property="Background" Value="{StaticResource ToolBar.Tray.Background}"/>
  </Style>


  <!-- DataGrid ============================================================ -->

  <SolidColorBrush x:Key="DataGrid.GridLine.Normal" Color="#FFE5E5E5" po:Freeze="True"/>
  <SolidColorBrush x:Key="{x:Static DataGrid.FocusBorderBrushKey}" Color="#FF000000" po:Freeze="True"/>

  <Style x:Key="{ComponentResourceKey {x:Type DataGrid}, DataGridSelectAllButtonStyle}"
         TargetType="{x:Type Button}">
    <Setter Property="Background" Value="{StaticResource Header.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource Header.Border.Normal}"/>
    <Setter Property="BorderThickness" Value="0,0,1,1"/>
    <Setter Property="MinWidth" Value="0"/>
    <Setter Property="MinHeight" Value="0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <Border x:Name="Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    SnapsToDevicePixels="True"/>
            <Polygon x:Name="Arrow"
                     HorizontalAlignment="Right"
                     VerticalAlignment="Bottom"
                     Margin="0,0,3,3"
                     Opacity="0.15"
                     Fill="Black"
                     Stretch="Uniform"
                     Points="0,10 10,10 10,0"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Arrow" Property="Visibility" Value="Collapsed"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" Value="{StaticResource Header.Background.Hot}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Header.Border.Hot}"/>
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Background" Value="{StaticResource Header.Background.Pressed}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Header.Border.Pressed}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="{x:Type DataGrid}">
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
    <Setter Property="Background" Value="{StaticResource ListBox.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ListBox.Border.Normal}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Padding" Value="1"/>
    <Setter Property="HorizontalGridLinesBrush" Value="{StaticResource DataGrid.GridLine.Normal}"/>
    <Setter Property="VerticalGridLinesBrush" Value="{StaticResource DataGrid.GridLine.Normal}"/>
    <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGrid}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Padding="{TemplateBinding Padding}"
                  SnapsToDevicePixels="True">
            <ScrollViewer x:Name="DG_ScrollViewer" Focusable="False">
              <ScrollViewer.Template>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                  <Grid>
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto"/>
                      <RowDefinition Height="*"/>
                      <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>

                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto"/>
                      <ColumnDefinition Width="*"/>
                      <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <Button Command="{x:Static DataGrid.SelectAllCommand}"
                            Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                            Style="{DynamicResource {ComponentResourceKey {x:Type DataGrid}, DataGridSelectAllButtonStyle}}"
                            Focusable="False">
                      <Button.Visibility>
                        <Binding Path="HeadersVisibility"
                                 RelativeSource="{RelativeSource AncestorType={x:Type DataGrid}}"
                                 Converter="{x:Static DataGrid.HeadersVisibilityConverter}"
                                 ConverterParameter="{x:Static DataGridHeadersVisibility.All}"/>
                      </Button.Visibility>
                    </Button>

                    <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter"
                                                    Grid.Column="1">
                      <DataGridColumnHeadersPresenter.Visibility>
                        <Binding Path="HeadersVisibility"
                                 RelativeSource="{RelativeSource AncestorType={x:Type DataGrid}}"
                                 Converter="{x:Static DataGrid.HeadersVisibilityConverter}"
                                 ConverterParameter="{x:Static DataGridHeadersVisibility.Column}"/>
                      </DataGridColumnHeadersPresenter.Visibility>
                    </DataGridColumnHeadersPresenter>

                    <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                            Grid.Row="1" Grid.ColumnSpan="2"
                                            CanContentScroll="{TemplateBinding CanContentScroll}"/>

                    <ScrollBar x:Name="PART_VerticalScrollBar"
                               Grid.Row="1" Grid.Column="2"
                               Orientation="Vertical"
                               Maximum="{TemplateBinding ScrollableHeight}"
                               ViewportSize="{TemplateBinding ViewportHeight}"
                               Value="{Binding VerticalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                               Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>

                    <Grid Grid.Row="2" Grid.Column="1">
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                        <ColumnDefinition Width="*"/>
                      </Grid.ColumnDefinitions>
                      <ScrollBar x:Name="PART_HorizontalScrollBar"
                                 Grid.Column="1"
                                 Orientation="Horizontal"
                                 Maximum="{TemplateBinding ScrollableWidth}"
                                 ViewportSize="{TemplateBinding ViewportWidth}"
                                 Value="{Binding HorizontalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                 Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                    </Grid>
                  </Grid>
                </ControlTemplate>
              </ScrollViewer.Template>
              <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </ScrollViewer>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Background" Value="{StaticResource ListBox.Background.Disabled}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ListBox.Border.Disabled}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsGrouping" Value="True"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="{x:Type DataGridColumnHeadersPresenter}"
         TargetType="{x:Type DataGridColumnHeadersPresenter}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGridColumnHeadersPresenter}">
          <Grid>
            <DataGridColumnHeader x:Name="PART_FillerColumnHeader" IsHitTestVisible="False"/>
            <ItemsPresenter/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Static DataGridColumnHeader.ColumnFloatingHeaderStyleKey}" TargetType="{x:Type Control}">
    <Setter Property="Opacity" Value="0.6"/>
    <Setter Property="Background" Value="#FF999999"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Control}">
          <Border BorderThickness="{TemplateBinding BorderThickness}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  Padding ="{TemplateBinding Padding}"
                  Background="{TemplateBinding Background}">
            <Grid>
              <Canvas x:Name="PART_VisualBrushCanvas" Margin="{TemplateBinding Margin}"
                      Opacity="0.6"/>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Static DataGridColumnHeader.ColumnHeaderDropSeparatorStyleKey}"
         TargetType="{x:Type Separator}">
    <Setter Property="Background" Value="#FF0066CC"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Separator}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  SnapsToDevicePixels="True">
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type DataGridRow}">
    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
    <Setter Property="ValidationErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <TextBlock Margin="2,0,0,0" VerticalAlignment="Center" Foreground="Red" Text="!"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGridRow}">
          <Border x:Name="DGR_Border"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  SnapsToDevicePixels="True">
            <SelectiveScrollingGrid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>

              <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
              </Grid.RowDefinitions>

              <DataGridCellsPresenter Grid.Column="1"
                                      ItemsPanel="{TemplateBinding ItemsPanel}"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

              <DataGridDetailsPresenter Grid.Column="1" Grid.Row="1"
                                        Visibility="{TemplateBinding DetailsVisibility}">
                <SelectiveScrollingGrid.SelectiveScrollingOrientation>
                  <Binding Path="AreRowDetailsFrozen"
                           RelativeSource="{RelativeSource AncestorType={x:Type DataGrid}}"
                           Converter="{x:Static DataGrid.RowDetailsScrollingConverter}"
                           ConverterParameter="{x:Static SelectiveScrollingOrientation.Vertical}"/>
                </SelectiveScrollingGrid.SelectiveScrollingOrientation>
              </DataGridDetailsPresenter>

              <DataGridRowHeader Grid.RowSpan="2"
                                 SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical">
                <DataGridRowHeader.Visibility>
                  <Binding Path="HeadersVisibility"
                           RelativeSource="{RelativeSource AncestorType={x:Type DataGrid}}"
                           Converter="{x:Static DataGrid.HeadersVisibilityConverter}"
                           ConverterParameter="{x:Static DataGridHeadersVisibility.Row}"/>
                </DataGridRowHeader.Visibility>
              </DataGridRowHeader>
            </SelectiveScrollingGrid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsNewItem" Value="True">
        <Setter Property="Margin" Value="{Binding NewItemMargin, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="{x:Type DataGridCellsPresenter}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGridCellsPresenter}">
          <ItemsPresenter/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type DataGridCell}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Padding" Value="2"/>
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGridCell}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Padding="{TemplateBinding Padding}"
                  SnapsToDevicePixels="True">
            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsSelected" Value="True">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
      </Trigger>
      <Trigger Property="IsKeyboardFocusWithin" Value="True">
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelected" Value="True"/>
          <Condition Property="Selector.IsSelectionActive" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="{x:Static DataGridComboBoxColumn.TextBlockComboBoxStyleKey}" TargetType="{x:Type ComboBox}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <ContentPresenter Margin="1,1,1,1"
                            Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            IsHitTestVisible="False"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
    <Setter Property="Width" Value="8"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Cursor" Value="SizeWE"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="RowHeaderGripperStyle" TargetType="{x:Type Thumb}">
    <Setter Property="Height" Value="4"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Cursor" Value="SizeNS"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <aero10:DataGridLinesVisibilityConverter x:Key="DataGridLinesVisibilityConverter"/>

  <Style TargetType="{x:Type DataGridColumnHeader}">
    <Setter Property="Padding" Value="6,4,6,5"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
          <Grid>
            <aero10:HeaderChrome x:Name="Chrome"
                                 SortDirection="{TemplateBinding SortDirection}"
                                 IsHovered="{TemplateBinding IsMouseOver}"
                                 IsPressed="{TemplateBinding IsPressed}"
                                 IsClickable="{TemplateBinding CanUserSort}"
                                 Background="{TemplateBinding Background}"
                                 BorderBrush="{TemplateBinding BorderBrush}"
                                 BorderThickness="{TemplateBinding BorderThickness}"
                                 Padding ="{TemplateBinding Padding}"
                                 SeparatorVisibility="{TemplateBinding SeparatorVisibility}"
                                 SeparatorBrush="{TemplateBinding SeparatorBrush}">
              <aero10:HeaderChrome.BorderVisibility>
                <Binding Path="GridLinesVisibility"
                         RelativeSource="{RelativeSource AncestorType={x:Type DataGrid}}"
                         Converter="{StaticResource DataGridLinesVisibilityConverter}"
                         ConverterParameter="{x:Static DataGridGridLinesVisibility.Horizontal}"/>
              </aero10:HeaderChrome.BorderVisibility>
              <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                RecognizesAccessKey="True"/>
            </aero10:HeaderChrome>

            <Thumb x:Name="PART_LeftHeaderGripper"
                   HorizontalAlignment="Left"
                   Style="{StaticResource ColumnHeaderGripperStyle}"/>
            <Thumb x:Name="PART_RightHeaderGripper"
                   HorizontalAlignment="Right"
                   Style="{StaticResource ColumnHeaderGripperStyle}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type DataGridRowHeader}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
          <Grid>
            <aero10:HeaderChrome Orientation="Horizontal"
                                 IsSelected="{TemplateBinding IsRowSelected}"
                                 IsHovered ="{TemplateBinding IsMouseOver}"
                                 IsPressed="{TemplateBinding IsPressed}"
                                 Background="{TemplateBinding Background}"
                                 BorderBrush="{TemplateBinding BorderBrush}"
                                 BorderThickness="{TemplateBinding BorderThickness}"
                                 Padding ="{TemplateBinding Padding}"
                                 SeparatorVisibility="{TemplateBinding SeparatorVisibility}"
                                 SeparatorBrush="{TemplateBinding SeparatorBrush}">
              <StackPanel Orientation="Horizontal">
                <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  VerticalAlignment="Center"
                                  RecognizesAccessKey="True"/>
                <Control SnapsToDevicePixels="False"
                         Template="{Binding ValidationErrorTemplate, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}">
                  <Control.Visibility>
                    <Binding Path="(Validation.HasError)"
                             RelativeSource="{RelativeSource AncestorType={x:Type DataGridRow}}"
                             Converter="{StaticResource BoolToVisibilityConverter}"/>
                  </Control.Visibility>
                </Control>
              </StackPanel>
            </aero10:HeaderChrome>
            <Thumb x:Name="PART_TopHeaderGripper"
                   VerticalAlignment="Top"
                   Style="{StaticResource RowHeaderGripperStyle}"/>
            <Thumb x:Name="PART_BottomHeaderGripper"
                   VerticalAlignment="Bottom"
                   Style="{StaticResource RowHeaderGripperStyle}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <!-- ToolTip ============================================================= -->

  <SolidColorBrush x:Key="ToolTip.Foreground" Color="#FF575757" po:Freeze="True"/>
  <SolidColorBrush x:Key="ToolTip.Background" Color="#FFFFFFFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="ToolTip.Border" Color="#FF767676" po:Freeze="True"/>

  <Style TargetType="{x:Type ToolTip}">
    <Setter Property="Foreground" Value="{StaticResource ToolTip.Foreground}"/>
    <Setter Property="Background" Value="{StaticResource ToolTip.Background}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ToolTip.Border}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Padding" Value="5,1,6,2"/>
    <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.StatusFontFamilyKey}}"/>
    <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.StatusFontSizeKey}}"/>
    <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.StatusFontStyleKey}}"/>
    <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.StatusFontWeightKey}}"/>
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="HasDropShadow" Value="{DynamicResource {x:Static SystemParameters.DropShadowKey}}"/>
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToolTip}">
          <aero10:SystemDropShadowChrome x:Name="Shdw"
                                         Color="Transparent"
                                         SnapsToDevicePixels="True">
            <Border x:Name="Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    SnapsToDevicePixels="True">
              <ContentPresenter Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </Border>
          </aero10:SystemDropShadowChrome>
          <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" Value="True">
              <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5"/>
              <Setter TargetName="Shdw" Property="Color" Value="#71000000"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <!-- DatePicker ========================================================== -->

  <DrawingImage x:Key="DatePicker.DropDownGlyph">
    <DrawingImage.Drawing>
      <DrawingGroup>
        <GeometryDrawing Brush="Transparent" Geometry="M0,0 24,0 24,17 0,17 z"/>
        <!-- Outline -->
        <GeometryDrawing Brush="#FF776B68" Geometry="F0 M3,2 12,2 13,3 13,12 12,12 11,13 11,14 3,14 2,13 2,3  M3,3 12,3 12,11 10,11 10,13 3,13 z"/>
        <GeometryDrawing Geometry="M3,3 12,3 12,11 10,11 10,13 3,13 z">
          <GeometryDrawing.Brush>
            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0.89">
              <GradientStop Offset="0.2" Color="#FFFFFFFF"/>
              <GradientStop Offset="1" Color="#FFD0DAED"/>
            </LinearGradientBrush>
          </GeometryDrawing.Brush>
        </GeometryDrawing>
        <!-- Grid -->
        <GeometryDrawing Geometry="F0 M4,3 11,3 11,4 4,4  M4,5 11,5 11,11 10,11 10,12 4,12  M5,6 6,6 6,7 5,7  M7,6 8,6 8,7 7,7  M9,6 10,6 10,7 9,7  M5,8 6,8 6,9 5,9 M7,8 8,8 8,9 7,9  M9,8 10,8 10,9 9,9  M5,10 6,10 6,11 5,11  M7,10 8,10 8,11 7,11  M9,10 10,10 10,11 9,11 z">
          <GeometryDrawing.Brush>
            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0.89">
              <GradientStop Offset="0" Color="#FFCCCCCC"/>
              <GradientStop Offset="1" Color="#FFA7AFBB"/>
            </LinearGradientBrush>
          </GeometryDrawing.Brush>
        </GeometryDrawing>
        <!-- Arrow -->
        <GeometryDrawing Brush="#FF4D6185" Geometry="M14.5,6 22.5,6 18.5,10 z"/>
        <!-- Shadows -->
        <GeometryDrawing Brush="#30000000" Geometry="M4,14 11,14 11,15 11,12 13,12 13,13 12,13 12,14 11,15 4,15 z"/>
        <GeometryDrawing Brush="#10000000" Geometry="M5,15 10.5,15 13,12.5 13,6 14,6 14,13 11,16 4,16 z"/>
      </DrawingGroup>
    </DrawingImage.Drawing>
  </DrawingImage>

  <DrawingImage x:Key="DatePicker.DropDownGlyph.Disabled">
    <DrawingImage.Drawing>
      <DrawingGroup>
        <GeometryDrawing Brush="Transparent" Geometry="M0,0 24,0 24,17 0,17 z"/>
        <!-- Outline -->
        <GeometryDrawing Brush="#66776B68" Geometry="F0 M3,2 12,2 13,3 13,12 12,12 11,13 11,14 3,14 2,13 2,3  M3,3 12,3 12,11 10,11 10,13 3,13 z"/>
        <GeometryDrawing Geometry="M3,3 12,3 12,11 10,11 10,13 3,13 z">
          <GeometryDrawing.Brush>
            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0.89">
              <GradientStop Offset="0" Color="#66FFFFFF"/>
              <GradientStop Offset="1" Color="#66D0DAED"/>
            </LinearGradientBrush>
          </GeometryDrawing.Brush>
        </GeometryDrawing>
        <!-- Grid -->
        <GeometryDrawing Geometry="F0 M4,3 11,3 11,4 4,4  M4,5 11,5 11,12 4,12  M5,6 6,6 6,7 5,7  M7,6 8,6 8,7 7,7  M9,6 10,6 10,7 9,7  M5,8 6,8 6,9 5,9 M7,8 8,8 8,9 7,9  M9,8 10,8 10,9 9,9  M5,10 6,10 6,11 5,11  M7,10 8,10 8,11 7,11  M9,10 10,10 10,11 9,11 z">
          <GeometryDrawing.Brush>
            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0.89">
              <GradientStop Offset="0" Color="#66C8C8C8"/>
              <GradientStop Offset="1" Color="#66A7AFBB"/>
            </LinearGradientBrush>
          </GeometryDrawing.Brush>
        </GeometryDrawing>
        <!-- Arrow -->
        <GeometryDrawing Brush="#FFC9C9C2" Geometry="M14.5,6 22.5,6 18.5,10 z"/>
        <!-- Shadow -->
        <GeometryDrawing Brush="#13000000" Geometry="M4,14 11,14 11,15 11,12 13,12 13,13 12,13 12,14 11,15 4,15 z"/>
        <GeometryDrawing Brush="#06000000" Geometry="M5,15 10.5,15 13,12.5 13,6 14,6 14,13 11,16 4,16 z"/>
      </DrawingGroup>
    </DrawingImage.Drawing>
  </DrawingImage>

  <Style x:Key="DatePicker.DropDownButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="MinWidth" Value="0"/>
    <Setter Property="MinHeight" Value="0"/>
    <Setter Property="Padding" Value="4,2"/>
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Padding="{TemplateBinding Padding}">
            <Image x:Name="Glyph"
                   Width="24"
                   Height="17"
                   Source="{StaticResource DatePicker.DropDownGlyph}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Glyph" Property="Source" Value="{StaticResource DatePicker.DropDownGlyph.Disabled}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" Value="#FFE5F1FB"/>
        <Setter Property="BorderBrush" Value="#FF0078D7"/>
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Background" Value="#FFCCE4F7"/>
        <Setter Property="BorderBrush" Value="#FF005499"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="{x:Type DatePicker}">
    <Setter Property="Foreground" Value="#FF000000"/>
    <Setter Property="Background" Value="#FFFFFFFF"/>
    <Setter Property="BorderBrush" Value="#FF7A7A7A"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Padding" Value="1,2"/>
    <Setter Property="IsTodayHighlighted" Value="True"/>
    <Setter Property="SelectedDateFormat" Value="Short"/>
    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DatePicker}">
          <Grid x:Name="PART_Root">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Border Grid.ColumnSpan="2"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Background="{TemplateBinding Background}"
                    Padding="{TemplateBinding Padding}"/>

            <Button x:Name="PART_Button"
                    Grid.Row="0"
                    Grid.Column="1"
                    Style="{StaticResource DatePicker.DropDownButtonStyle}"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Stretch"
                    Foreground="{TemplateBinding Foreground}"/>

            <DatePickerTextBox x:Name="PART_TextBox"
                               Foreground="{TemplateBinding Foreground}"
                               Padding="{TemplateBinding Padding}"
                               HorizontalContentAlignment="Stretch"
                               VerticalContentAlignment="Stretch"
                               VerticalAlignment="Center"
                               Focusable="{TemplateBinding Focusable}"/>

            <Grid x:Name="PART_DisabledVisual"
                    Grid.ColumnSpan="2"
                    Opacity="0"
                    IsHitTestVisible="False">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
              </Grid.ColumnDefinitions>
              <!-- Use a custom Popup since the DatePicker parts are too limited
                   to do this in the template. -->
              <aero10:AutoDropShadowPopup x:Name="PART_Popup"
                                          PlacementTarget="{Binding ElementName=PART_TextBox}"
                                          Placement="Bottom"
                                          StaysOpen="False"
                                          AllowsTransparency="True"
                                          ShadowColor="Transparent"/>
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
              <Setter TargetName="PART_Popup" Property="ShadowMargin" Value="0,0,5,5"/>
              <Setter TargetName="PART_Popup" Property="ShadowColor" Value="#71000000"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="PART_DisabledVisual" Property="Opacity" Value="1"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="BorderBrush" Value="#FF171717"/>
      </Trigger>
      <Trigger Property="IsKeyboardFocusWithin" Value="True">
        <Setter Property="BorderBrush" Value="#FF0078D7"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
        <Setter Property="BorderBrush" Value="#FFCCCCCC"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="{x:Type DatePickerTextBox}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="aero:TextBoxService.ViewMargin" Value="0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DatePickerTextBox}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  VisualStateManager.CustomVisualStateManager="{x:Static aero:SystemVisualStateManager.Instance}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="WatermarkStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Unwatermarked"/>
                <VisualState x:Name="Watermarked">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Watermark"
                                                   Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid Margin="1"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
              <ScrollViewer x:Name="PART_ContentHost"
                            Focusable="False"
                            HorizontalScrollBarVisibility="Hidden"
                            VerticalScrollBarVisibility="Hidden"/>
              <ContentControl x:Name="PART_Watermark"
                              Visibility="Hidden"
                              VerticalAlignment="Center"
                              Focusable="False"
                              IsHitTestVisible="False"
                              Foreground="#FF575757"/>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <!-- Calendar ============================================================ -->

  <SolidColorBrush x:Key="Calendar.Button.Normal.Foreground" Color="#FF000000" po:Freeze="True"/>
  <SolidColorBrush x:Key="Calendar.Button.Inactive.Foreground" Color="#FF646464" po:Freeze="True"/>
  <SolidColorBrush x:Key="Calendar.Button.InactiveHot.Foreground" Color="#FFB1C5FC" po:Freeze="True"/>
  <SolidColorBrush x:Key="Calendar.Button.Selected.Background" Color="#32008AFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Calendar.Button.Today.Border" Color="#FF0066CC" po:Freeze="True"/>
  <SolidColorBrush x:Key="Calendar.Button.Hot.Foreground" Color="#FF0066CC" po:Freeze="True"/>
  <SolidColorBrush x:Key="Calendar.Button.Hot.Background" Color="#1A0089FF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Calendar.Button.SelectedHot.Background" Color="#33008CFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Calendar.Button.SelectedHot.Border" Color="#66008CFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Calendar.Button.SelectedNotFocused.Background" Color="#26000000" po:Freeze="True"/>
  <LinearGradientBrush x:Key="Calendar.NavButton.Background.Normal"
                       StartPoint="0,0" EndPoint="0,1" po:Freeze="True">
    <GradientStop Offset="0" Color="#FF3B3B3B"/>
    <GradientStop Offset="1" Color="#FF0B0B0B"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="Calendar.NavButton.Background.Disabled"
                       StartPoint="0,0" EndPoint="0,1" po:Freeze="True">
    <GradientStop Offset="0" Color="#663C3C3C"/>
    <GradientStop Offset="1" Color="#660A0A0A"/>
  </LinearGradientBrush>

  <Style TargetType="{x:Type Calendar}">
    <Setter Property="Foreground" Value="{StaticResource Calendar.Button.Normal.Foreground}"/>
    <Setter Property="Background" Value="White"/>
    <Setter Property="BorderBrush" Value="#FF979797"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Padding" Value="3"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Calendar}">
          <StackPanel x:Name="PART_Root" HorizontalAlignment="Center">
            <CalendarItem x:Name="PART_CalendarItem"
                          Style="{TemplateBinding CalendarItemStyle}"
                          Background="{TemplateBinding Background}"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          Padding="{TemplateBinding Padding}"/>
          </StackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type CalendarItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CalendarItem}">
          <ControlTemplate.Resources>
            <DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
              <Border BorderBrush="#FFF5F5F5" BorderThickness="0,0,0,1">
                <TextBlock Text="{Binding}"
                           HorizontalAlignment="Center"
                           VerticalAlignment="Center"/>
              </Border>
            </DataTemplate>
          </ControlTemplate.Resources>
          <Border x:Name="PART_Root"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Padding="{TemplateBinding Padding}">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
              </Grid.ColumnDefinitions>

              <Grid.Resources>
                <ControlTemplate x:Key="PreviousButtonTemplate" TargetType="{x:Type Button}">
                  <Grid Background="Transparent">
                    <Path x:Name="Glyph"
                          Data="M9,3.5 5,7.5 9,11.5 z"
                          Fill="{StaticResource Calendar.NavButton.Background.Normal}"
                          Width="16"
                          Height="16"
                          HorizontalAlignment="Left"
                          VerticalAlignment="Center"
                          Stretch="None"
                          RenderOptions.EdgeMode="Aliased"/>
                  </Grid>
                  <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                      <Setter TargetName="Glyph" Property="Fill"
                              Value="{StaticResource Calendar.Button.Hot.Foreground}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                      <Setter TargetName="Glyph" Property="Fill"
                              Value="{StaticResource Calendar.NavButton.Background.Disabled}"/>
                    </Trigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>

                <ControlTemplate x:Key="NextButtonTemplate" TargetType="{x:Type Button}">
                  <Grid Background="Transparent">
                    <Path x:Name="Glyph"
                          Data="M7,3.5 11,7.5 7,11.5 z"
                          Fill="{StaticResource Calendar.NavButton.Background.Normal}"
                          Width="16"
                          Height="16"
                          HorizontalAlignment="Right"
                          VerticalAlignment="Center"
                          Stretch="None"
                          RenderOptions.EdgeMode="Aliased"/>
                  </Grid>
                  <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                      <Setter TargetName="Glyph" Property="Fill"
                              Value="{StaticResource Calendar.Button.Hot.Foreground}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                      <Setter TargetName="Glyph" Property="Fill"
                              Value="{StaticResource Calendar.NavButton.Background.Disabled}"/>
                    </Trigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>

                <Style x:Key="HeaderButtonStyle" TargetType="{x:Type Button}">
                  <Setter Property="Foreground"
                          Value="{StaticResource Calendar.Button.Normal.Foreground}"/>
                  <Setter Property="Template">
                    <Setter.Value>
                      <ControlTemplate TargetType="{x:Type Button}">
                        <Grid Background="Transparent">
                          <ContentPresenter Content="{TemplateBinding Content}"
                                            ContentTemplate="{TemplateBinding ContentTemplate}"
                                            Margin="{TemplateBinding Padding}"
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                  <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                      <Setter Property="Foreground"
                              Value="{StaticResource Calendar.Button.Hot.Foreground}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                      <Setter Property="Foreground"
                              Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                    </Trigger>
                  </Style.Triggers>
                </Style>
              </Grid.Resources>

              <Button x:Name="PART_PreviousButton"
                      Grid.Row="0"
                      Grid.Column="0"
                      Template="{StaticResource PreviousButtonTemplate}"
                      Width="16" Height="16"
                      Margin="0,0,0,1"
                      HorizontalAlignment="Left"
                      VerticalAlignment="Center"
                      Focusable="False"/>

              <Button x:Name="PART_HeaderButton"
                      Grid.Row="0"
                      Grid.Column="1"
                      Style="{StaticResource HeaderButtonStyle}"
                      Padding="1,7"
                      HorizontalAlignment="Stretch"
                      VerticalAlignment="Center"
                      Focusable="False"/>

              <Button x:Name="PART_NextButton"
                      Grid.Row="0"
                      Grid.Column="2"
                      Template="{StaticResource NextButtonTemplate}"
                      Width="16" Height="16"
                      Margin="0,0,0,1"
                      HorizontalAlignment="Right"
                      VerticalAlignment="Center"
                      Focusable="False"/>

              <Grid x:Name="PART_MonthView"
                    Grid.Row="1"
                    Grid.ColumnSpan="3"
                    HorizontalAlignment="Center"
                    Visibility="Visible">
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto"/>
                  <RowDefinition Height="Auto"/>
                  <RowDefinition Height="Auto"/>
                  <RowDefinition Height="Auto"/>
                  <RowDefinition Height="Auto"/>
                  <RowDefinition Height="Auto"/>
                  <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto"/>
                  <ColumnDefinition Width="Auto"/>
                  <ColumnDefinition Width="Auto"/>
                  <ColumnDefinition Width="Auto"/>
                  <ColumnDefinition Width="Auto"/>
                  <ColumnDefinition Width="Auto"/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
              </Grid>

              <Grid x:Name="PART_YearView"
                    Grid.Row="1"
                    Grid.ColumnSpan="3"
                    Visibility="Hidden">
                <Grid.RowDefinitions>
                  <RowDefinition/>
                  <RowDefinition/>
                  <RowDefinition/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition/>
                  <ColumnDefinition/>
                  <ColumnDefinition/>
                  <ColumnDefinition/>
                </Grid.ColumnDefinitions>
              </Grid>

              <Rectangle x:Name="PART_DisabledVisual"
                         Grid.Row="1"
                         Grid.ColumnSpan="3"
                         Stretch="Fill"
                         Fill="#80FFFFFF"
                         Visibility="Collapsed"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <DataTrigger Value="Year">
              <DataTrigger.Binding>
                <Binding Path="DisplayMode">
                  <Binding.RelativeSource>
                    <RelativeSource Mode="FindAncestor" AncestorType="{x:Type Calendar}"/>
                  </Binding.RelativeSource>
                </Binding>
              </DataTrigger.Binding>
              <Setter TargetName="PART_MonthView" Property="Visibility" Value="Hidden"/>
              <Setter TargetName="PART_YearView" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Value="Decade">
              <DataTrigger.Binding>
                <Binding Path="DisplayMode">
                  <Binding.RelativeSource>
                    <RelativeSource Mode="FindAncestor" AncestorType="{x:Type Calendar}"/>
                  </Binding.RelativeSource>
                </Binding>
              </DataTrigger.Binding>
              <Setter TargetName="PART_MonthView" Property="Visibility" Value="Hidden"/>
              <Setter TargetName="PART_YearView" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="PART_DisabledVisual" Property="Visibility" Value="Visible"/>
              <Setter TargetName="PART_Root" Property="BorderBrush" Value="#FFD9D9D9"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type CalendarDayButton}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Padding" Value="5,0"/>
    <Setter Property="MinWidth" Value="5"/>
    <Setter Property="MinHeight" Value="5"/>
    <Setter Property="FontSize" Value="12"/>
    <Setter Property="HorizontalContentAlignment" Value="Right"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CalendarDayButton}">
          <Grid>
            <Border x:Name="Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Padding="{TemplateBinding Padding}">
              <ContentPresenter x:Name="NormalText"
                                Margin="0,-1,0,-1"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Border>
            <Border x:Name="TodayBorder"
                    BorderBrush="#FF0066CC"
                    BorderThickness="1"
                    CornerRadius="1"
                    Visibility="Collapsed"/>
            <Path x:Name="Blackout"
                  Data="M8.1772461,11.029181 L10.433105,11.029181 L11.700684,12.801641 L12.973633,11.029181 L15.191895,11.029181 L12.844727,13.999395 L15.21875,17.060919 L12.962891,17.060919 L11.673828,15.256231 L10.352539,17.060919 L8.1396484,17.060919 L10.519043,14.042364 z"
                  Opacity="0.2"
                  Margin="2"
                  HorizontalAlignment="Stretch"
                  VerticalAlignment="Stretch"
                  RenderTransformOrigin="0.5,0.5"
                  Fill="#FF000000"
                  Stretch="Fill"
                  Visibility="Collapsed"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsToday" Value="True">
              <Setter TargetName="TodayBorder" Property="Visibility" Value="Visible"/>
              <Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
            </Trigger>
            <Trigger Property="IsBlackedOut" Value="True">
              <Setter TargetName="Blackout" Property="Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsInactive" Value="True">
        <Setter Property="Foreground" Value="{StaticResource Calendar.Button.Inactive.Foreground}"/>
      </Trigger>
      <Trigger Property="IsToday" Value="True">
        <Setter Property="Foreground" Value="{StaticResource Calendar.Button.Today.Border}"/>
      </Trigger>
      <Trigger Property="IsSelected" Value="True">
        <Setter Property="Foreground" Value="{StaticResource Calendar.Button.Normal.Foreground}"/>
        <Setter Property="Background" Value="{StaticResource Calendar.Button.Selected.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Calendar.Button.Selected.Background}"/>
      </Trigger>
      <Trigger Property="IsHighlighted" Value="True">
        <Setter Property="Foreground" Value="{StaticResource Calendar.Button.Normal.Foreground}"/>
        <Setter Property="Background" Value="{StaticResource Calendar.Button.Selected.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Calendar.Button.Selected.Background}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelected" Value="True"/>
          <Condition Property="Selector.IsSelectionActive" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{StaticResource Calendar.Button.SelectedNotFocused.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Calendar.Button.SelectedNotFocused.Background}"/>
      </MultiTrigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Foreground" Value="{StaticResource Calendar.Button.Hot.Foreground}"/>
        <Setter Property="Background" Value="{StaticResource Calendar.Button.Hot.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Calendar.Button.Hot.Background}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True"/>
          <Condition Property="IsFocused" Value="True"/>
          <Condition Property="IsBlackedOut" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{StaticResource Calendar.Button.Selected.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Calendar.Button.Selected.Background}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True"/>
          <Condition Property="IsSelected" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{StaticResource Calendar.Button.SelectedHot.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Calendar.Button.SelectedHot.Border}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True"/>
          <Condition Property="IsInactive" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{StaticResource Calendar.Button.InactiveHot.Foreground}"/>
      </MultiTrigger>
      <Trigger Property="IsToday" Value="True">
        <Setter Property="BorderBrush" Value="{StaticResource Calendar.Button.Today.Border}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="{x:Type CalendarButton}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="MinWidth" Value="0"/>
    <Setter Property="MinHeight" Value="0"/>
    <Setter Property="FontSize" Value="12"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CalendarButton}">
          <Border x:Name="Background"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <ContentPresenter Margin="0,-1,0,0"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsInactive" Value="True">
        <Setter Property="Foreground" Value="{StaticResource Calendar.Button.Inactive.Foreground}"/>
      </Trigger>
      <Trigger Property="HasSelectedDays" Value="True">
        <Setter Property="Background" Value="{StaticResource Calendar.Button.Selected.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Calendar.Button.Selected.Background}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="HasSelectedDays" Value="True"/>
          <Condition Property="Selector.IsSelectionActive" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{StaticResource Calendar.Button.SelectedNotFocused.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Calendar.Button.SelectedNotFocused.Background}"/>
      </MultiTrigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Foreground" Value="{StaticResource Calendar.Button.Hot.Foreground}"/>
        <Setter Property="Background" Value="{StaticResource Calendar.Button.Hot.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Calendar.Button.Hot.Background}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True"/>
          <Condition Property="IsFocused" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{StaticResource Calendar.Button.Selected.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Calendar.Button.Selected.Background}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True"/>
          <Condition Property="HasSelectedDays" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{StaticResource Calendar.Button.SelectedHot.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Calendar.Button.SelectedHot.Border}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True"/>
          <Condition Property="IsInactive" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{StaticResource Calendar.Button.InactiveHot.Foreground}"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
</ResourceDictionary>
