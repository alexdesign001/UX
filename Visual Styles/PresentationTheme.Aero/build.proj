<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
         ToolsVersion="15.0" DefaultTargets="Pack">
  <ItemGroup>
    <ProjectItem Include="Source\PresentationTheme.Aero\PresentationTheme.Aero.csproj"/>
    <ProjectItem Include="Source\PresentationTheme.Aero.Win8\PresentationTheme.Aero.Win8.csproj"/>
    <ProjectItem Include="Source\PresentationTheme.Aero.Win10\PresentationTheme.Aero.Win10.csproj"/>
    <ProjectItem Include="Source\PresentationTheme.AeroLite.Win8\PresentationTheme.AeroLite.Win8.csproj"/>
    <ProjectItem Include="Source\PresentationTheme.AeroLite.Win10\PresentationTheme.AeroLite.Win10.csproj"/>
    <ProjectItem Include="Source\PresentationTheme.HighContrast.Win8\PresentationTheme.HighContrast.Win8.csproj"/>
    <ProjectItem Include="Source\PresentationTheme.HighContrast.Win10\PresentationTheme.HighContrast.Win10.csproj"/>
    <PlatformProjectItem Include="Source\ThemeBrowser\ThemeBrowser.csproj"/>
    <PlatformProjectItem Include="Source\ThemePreviewer\ThemePreviewer.csproj"/>
    <NativeProjectItem Include="Source\UxThemeEx\UxThemeEx.vcxproj"/>
  </ItemGroup>
  <PropertyGroup>
    <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
    <OfficialBuildId Condition="'$(OfficialBuildId)' == '' AND '$(OfficialBuild)' == 'true'">$([System.DateTime]::UtcNow.ToString(`yyyyMMdd.HHmm`))</OfficialBuildId>
    <Platform Condition="'$(Platform)' == ''">x64</Platform>
    <BuildProperties>Configuration=$(Configuration);Platform=AnyCPU;OfficialBuildId=$(OfficialBuildId)</BuildProperties>
    <PlatformBuildProperties>Configuration=$(Configuration);Platform=$(Platform);OfficialBuildId=$(OfficialBuildId)</PlatformBuildProperties>
    <PackProperties>$(BuildProperties);IncludeSource=true</PackProperties>
    <PackageDir>$(MSBuildThisFileDirectory)dist\</PackageDir>
    <ToolsOutputPath>$(MSBuildThisFileDirectory)build\x64\bin\</ToolsOutputPath>
    <GitHubPagesDir>Docs\_site\</GitHubPagesDir>
  </PropertyGroup>

  <Import Project="Source\Build\Settings.props"/>
  <Import Project="$(MSBuildThisFileDirectory)Tools\MSBuildTasks.1.5.0.235\MSBuild.Community.Tasks.Targets"/>

  <UsingTask TaskName="ConcatFiles" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <OutputFilename ParameterType="System.String" Required="true"/>
      <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true"/>
      <Separator ParameterType="System.Boolean" Required="false"/>
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
      <![CDATA[
        try {
          var sepString = new string('-', 80);
          var trimChars = new char[] { ' ', '\r', '\n', '\t' };
          const string LF = "\n";
          const string CRLF = "\r\n";

          string outputFile = Path.GetFullPath(OutputFilename);
          Directory.CreateDirectory(Path.GetDirectoryName(outputFile));

          using (var output = new FileStream(outputFile, FileMode.Create, FileAccess.Write))
          using (var writer = new StreamWriter(output)) {
              int idx = 0;
              foreach (ITaskItem fileItem in Files) {
                  if (idx++ != 0 && Separator) {
                      writer.Write(LF);
                      writer.Write(sepString);
                      writer.Write(LF);
                      writer.Write(LF);
                  }
                  string text = File.ReadAllText(fileItem.ItemSpec);
                  writer.Write(text.Trim(trimChars).Replace(CRLF, LF));
                  writer.Write(LF);
              }
          }
          return true;
        } catch (Exception ex) {
          Log.LogErrorFromException(ex);
          return false;
        }
      ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="Clean" Condition="'$(Clean)'!='false'">
    <ItemGroup>
      <_Dir Include="build\any"/>
      <_Dir Include="build\x64"/>
      <_Dir Include="build\x86"/>
    </ItemGroup>
    <MSBuild Projects="@(ProjectItem)"
             Properties="$(BuildProperties)"
             Targets="Clean"
             BuildInParallel="true"
             StopOnFirstFailure="true"/>
    <MSBuild Projects="@(PlatformProjectItem)"
             Properties="$(PlatformBuildProperties)"
             Targets="Clean"
             BuildInParallel="true"
             StopOnFirstFailure="true"/>
    <MSBuild Projects="@(NativeProjectItem)"
             Properties="$(PlatformBuildProperties)"
             Targets="Clean"
             BuildInParallel="true"
             StopOnFirstFailure="true"/>
    <RemoveDir Directories="@(_Dir)" ContinueOnError="WarnAndContinue"/>
    <RemoveDir Directories="@(_Dir)"/>
  </Target>

  <Target Name="Restore" Condition="'$(Restore)'!='false'">
    <MSBuild Projects="@(ProjectItem)"
             Properties="$(BuildProperties)"
             Targets="Restore"
             BuildInParallel="true"
             StopOnFirstFailure="true"/>
    <MSBuild Projects="@(PlatformProjectItem)"
             Properties="$(PlatformBuildProperties)"
             Targets="Restore"
             BuildInParallel="true"
             StopOnFirstFailure="true"/>
    <Exec Command="nuget restore -PackagesDirectory &quot;$(MSBuildThisFileDirectory)Source\packages&quot; &quot;@(NativeProjectItem)&quot;"/>
  </Target>

  <Target Name="Build" DependsOnTargets="Restore" Condition="'$(Build)'!='false'">
    <!--
      Force re-evaluation of any native project by passing in a different set of
      global properties. A dummy property is enough. This is necessary since the
      project might have been loaded before restoring its NuGet packages. The
      seemingly useful MSBuild task property 'UnloadProjectsOnCompletion' cannot
      be used since it does not do anything.
    -->
    <MSBuild Projects="@(ProjectItem)"
             Properties="$(BuildProperties);Dummy=ForceReload"
             BuildInParallel="true"
             StopOnFirstFailure="true"/>
    <MSBuild Projects="@(PlatformProjectItem)"
             Properties="$(PlatformBuildProperties);Dummy=ForceReload"
             BuildInParallel="true"
             StopOnFirstFailure="true"/>
    <MSBuild Projects="@(NativeProjectItem)"
             Properties="$(PlatformBuildProperties);Dummy=ForceReload"
             BuildInParallel="true"
             StopOnFirstFailure="true"/>
  </Target>

  <Target Name="Pack" DependsOnTargets="Build" Condition="'$(Pack)'!='false'">
    <PropertyGroup>
      <PackArgs>-Version "$(Version)" -Symbols -SymbolPackageFormat snupkg</PackArgs>
      <PackArgs>$(PackArgs) -NoPackageAnalysis -OutputDirectory "$(PackageDir)\"</PackArgs>
      <PackArgs>$(PackArgs) -Properties "RepositoryCommit=$(BuildCommit)"</PackArgs>
    </PropertyGroup>
    <MakeDir Directories="$(PackageDir)"/>
    <Exec Command="nuget.exe pack $(PackArgs) Source\PresentationTheme.Aero.nuspec"/>
  </Target>

  <Target Name="BuildDocs">
    <Exec Command="docfx.exe Docs/docfx.json -f"/>
  </Target>

  <Target Name="UpdateDocs" DependsOnTargets="BuildDocs">
    <Exec WorkingDirectory="$(GitHubPagesDir)" Command="git add ."/>
    <Exec WorkingDirectory="$(GitHubPagesDir)" Command="git commit -m &quot;Update gh-pages&quot;"/>
  </Target>

  <Target Name="PrepareToolsLicense">
    <ItemGroup>
      <LicenseFile Include="LICENSE.txt"/>
      <LicenseFile Include="ThirdParty\EasyHook\LICENSE.txt"/>
    </ItemGroup>
    <ConcatFiles OutputFilename="$(ToolsOutputPath)LICENSE.txt" Files="@(LicenseFile)" Separator="true"/>
  </Target>

  <Target Name="PackTools" DependsOnTargets="PrepareToolsLicense;Build">
    <ItemGroup>
      <ToolItem Include="$(ToolsOutputPath)PresentationTheme.Aero.dll"/>
      <ToolItem Include="$(ToolsOutputPath)PresentationTheme.Aero.Win8.dll"/>
      <ToolItem Include="$(ToolsOutputPath)PresentationTheme.Aero.Win10.dll"/>
      <ToolItem Include="$(ToolsOutputPath)PresentationTheme.AeroLite.Win8.dll"/>
      <ToolItem Include="$(ToolsOutputPath)PresentationTheme.AeroLite.Win10.dll"/>
      <ToolItem Include="$(ToolsOutputPath)PresentationTheme.HighContrast.Win8.dll"/>
      <ToolItem Include="$(ToolsOutputPath)PresentationTheme.HighContrast.Win10.dll"/>
      <ToolItem Include="$(ToolsOutputPath)Microsoft.Xaml.Behaviors.dll"/>
      <ToolItem Include="$(ToolsOutputPath)ThemeBrowser.dll"/>
      <ToolItem Include="$(ToolsOutputPath)ThemeBrowser.exe"/>
      <ToolItem Include="$(ToolsOutputPath)ThemeBrowser.pdb"/>
      <ToolItem Include="$(ToolsOutputPath)ThemeBrowser.runtimeconfig.json"/>
      <ToolItem Include="$(ToolsOutputPath)ThemeCore.dll"/>
      <ToolItem Include="$(ToolsOutputPath)ThemeCore.pdb"/>
      <ToolItem Include="$(ToolsOutputPath)ThemePreviewer.dll"/>
      <ToolItem Include="$(ToolsOutputPath)ThemePreviewer.exe"/>
      <ToolItem Include="$(ToolsOutputPath)ThemePreviewer.pdb"/>
      <ToolItem Include="$(ToolsOutputPath)ThemePreviewer.runtimeconfig.json"/>
      <ToolItem Include="$(ToolsOutputPath)EasyHook64.dll"/>
      <ToolItem Include="$(ToolsOutputPath)UxThemeEx.dll"/>
      <ToolItem Include="$(ToolsOutputPath)UxThemeEx.pdb"/>
      <ToolItem Include="$(ToolsOutputPath)LICENSE.txt"/>
    </ItemGroup>
    <Error Condition="!Exists(@(ToolItem))" Text="Missing file: %(ToolItem.Identity)"/>
    <Zip ZipFileName="$(PackageDir)ThemeTools-$(Version).zip"
         WorkingDirectory="$(ToolsOutputPath)"
         Files="@(ToolItem)"/>
  </Target>

  <Target Name="Publish" DependsOnTargets="Build;GetVersion">
    <PropertyGroup>
      <PushArgs>&quot;dist/PresentationTheme.Aero.$(NuGetReleaseVersion).nupkg&quot;</PushArgs>
      <PushArgs>$(PushArgs) -Source https://www.nuget.org/api/v2/package</PushArgs>
    </PropertyGroup>
    <Exec Command="nuget push $(PushArgs)"/>
  </Target>
</Project>
